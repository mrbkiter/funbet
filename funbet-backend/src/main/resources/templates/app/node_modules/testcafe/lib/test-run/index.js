'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readFileRelative = require('read-file-relative');

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _testcafeHammerhead = require('testcafe-hammerhead');

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _debugLog = require('./debug-log');

var _debugLog2 = _interopRequireDefault(_debugLog);

var _formattableAdapter = require('../errors/test-run/formattable-adapter');

var _formattableAdapter2 = _interopRequireDefault(_formattableAdapter);

var _testRun = require('../errors/test-run/');

var _browserManipulationQueue = require('./browser-manipulation-queue');

var _browserManipulationQueue2 = _interopRequireDefault(_browserManipulationQueue);

var _clientMessages = require('./client-messages');

var _clientMessages2 = _interopRequireDefault(_clientMessages);

var _state = require('./state');

var _state2 = _interopRequireDefault(_state);

var _type = require('./commands/type');

var _type2 = _interopRequireDefault(_type);

var _browserManipulation = require('./commands/browser-manipulation');

var _service = require('./commands/service');

var _utils = require('./commands/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//Const
var TEST_RUN_TEMPLATE = (0, _readFileRelative.readSync)('../client/test-run/index.js.mustache');
var IFRAME_TEST_RUN_TEMPLATE = (0, _readFileRelative.readSync)('../client/test-run/iframe.js.mustache');
var TEST_DONE_CONFIRMATION_RESPONSE = 'test-done-confirmation';
var MAX_RESPONSE_DELAY = 2 * 60 * 1000;

var TestRun = function (_Session) {
    (0, _inherits3.default)(TestRun, _Session);

    function TestRun(test, browserConnection, screenshotCapturer, warningLog, opts) {
        (0, _classCallCheck3.default)(this, TestRun);

        var uploadsRoot = _path2.default.dirname(test.fixture.path);

        var _this = (0, _possibleConstructorReturn3.default)(this, _Session.call(this, uploadsRoot));

        _this.opts = opts;
        _this.test = test;
        _this.browserConnection = browserConnection;

        _this.state = _state2.default.initial;

        _this.driverTaskQueue = [];
        _this.testDoneCommandQueued = false;

        _this.dialogHandler = null;

        _this.pendingRequest = null;
        _this.pendingPageError = null;

        _this.ctx = (0, _create2.default)(null);

        _this.errs = [];

        _this.lastDriverStatusId = null;
        _this.lastDriverStatusResponse = null;

        _this.fileDownloadingHandled = false;
        _this.resolveWaitForFileDownloadingPromise = null;

        _this.browserManipulationQueue = new _browserManipulationQueue2.default(browserConnection, screenshotCapturer, warningLog);

        _this.debugLog = new _debugLog2.default(_this.browserConnection.userAgent);

        _this.injectable.scripts.push('/testcafe-core.js');
        _this.injectable.scripts.push('/testcafe-ui.js');
        _this.injectable.scripts.push('/testcafe-automation.js');
        _this.injectable.scripts.push('/testcafe-driver.js');
        _this.injectable.styles.push('/testcafe-ui-styles.css');
        return _this;
    }

    // Hammerhead payload


    TestRun.prototype._getPayloadScript = function _getPayloadScript() {
        this.fileDownloadingHandled = false;
        this.resolveWaitForFileDownloadingPromise = null;

        return _mustache2.default.render(TEST_RUN_TEMPLATE, {
            testRunId: (0, _stringify2.default)(this.id),
            browserId: (0, _stringify2.default)(this.browserConnection.id),
            browserHeartbeatUrl: (0, _stringify2.default)(this.browserConnection.heartbeatUrl),
            browserStatusUrl: (0, _stringify2.default)(this.browserConnection.statusUrl),
            userAgent: (0, _stringify2.default)(this.browserConnection.userAgent),
            testName: (0, _stringify2.default)(this.test.name),
            fixtureName: (0, _stringify2.default)(this.test.fixture.name),
            selectorTimeout: this.opts.selectorTimeout,
            skipJsErrors: this.opts.skipJsErrors,
            speed: this.opts.speed,
            dialogHandler: (0, _stringify2.default)(this.dialogHandler)
        });
    };

    TestRun.prototype._getIframePayloadScript = function _getIframePayloadScript() {
        return _mustache2.default.render(IFRAME_TEST_RUN_TEMPLATE, {
            testRunId: (0, _stringify2.default)(this.id),
            selectorTimeout: this.opts.selectorTimeout,
            speed: this.opts.speed,
            dialogHandler: (0, _stringify2.default)(this.dialogHandler)
        });
    };

    // Hammerhead handlers


    TestRun.prototype.getAuthCredentials = function getAuthCredentials() {
        return this.test.authCredentials;
    };

    TestRun.prototype.handleFileDownload = function handleFileDownload() {
        if (this.resolveWaitForFileDownloadingPromise) {
            this.resolveWaitForFileDownloadingPromise(true);
            this.resolveWaitForFileDownloadingPromise = null;
        } else this.fileDownloadingHandled = true;
    };

    TestRun.prototype.handlePageError = function handlePageError(ctx, err) {
        this.pendingPageError = new _testRun.PageLoadError(err);

        ctx.redirect(ctx.toProxyUrl('about:error'));
    };

    // Test function execution


    TestRun.prototype._executeTestFn = function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(state, fn) {
            var screenshotPath;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            this.state = state;

                            _context.prev = 1;
                            _context.next = 4;
                            return fn(this);

                        case 4:
                            _context.next = 15;
                            break;

                        case 6:
                            _context.prev = 6;
                            _context.t0 = _context['catch'](1);
                            screenshotPath = null;

                            if (!this.opts.takeScreenshotsOnFails) {
                                _context.next = 13;
                                break;
                            }

                            _context.next = 12;
                            return this.executeCommand(new _browserManipulation.TakeScreenshotOnFailCommand());

                        case 12:
                            screenshotPath = _context.sent;

                        case 13:

                            this._addError(_context.t0, screenshotPath);
                            return _context.abrupt('return', false);

                        case 15:
                            return _context.abrupt('return', !this._addPendingPageErrorIfAny());

                        case 16:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[1, 6]]);
        }));

        function _executeTestFn(_x, _x2) {
            return _ref.apply(this, arguments);
        }

        return _executeTestFn;
    }();

    TestRun.prototype._runBeforeHook = function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (!this.test.beforeFn) {
                                _context2.next = 4;
                                break;
                            }

                            _context2.next = 3;
                            return this._executeTestFn(_state2.default.inTestBeforeHook, this.test.beforeFn);

                        case 3:
                            return _context2.abrupt('return', _context2.sent);

                        case 4:
                            if (!this.test.fixture.beforeEachFn) {
                                _context2.next = 8;
                                break;
                            }

                            _context2.next = 7;
                            return this._executeTestFn(_state2.default.inFixtureBeforeEachHook, this.test.fixture.beforeEachFn);

                        case 7:
                            return _context2.abrupt('return', _context2.sent);

                        case 8:
                            return _context2.abrupt('return', true);

                        case 9:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function _runBeforeHook() {
            return _ref2.apply(this, arguments);
        }

        return _runBeforeHook;
    }();

    TestRun.prototype._runAfterHook = function () {
        var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            if (!this.test.afterFn) {
                                _context3.next = 4;
                                break;
                            }

                            _context3.next = 3;
                            return this._executeTestFn(_state2.default.inTestAfterHook, this.test.afterFn);

                        case 3:
                            return _context3.abrupt('return', _context3.sent);

                        case 4:
                            if (!this.test.fixture.afterEachFn) {
                                _context3.next = 8;
                                break;
                            }

                            _context3.next = 7;
                            return this._executeTestFn(_state2.default.inFixtureAfterEachHook, this.test.fixture.afterEachFn);

                        case 7:
                            return _context3.abrupt('return', _context3.sent);

                        case 8:
                            return _context3.abrupt('return', true);

                        case 9:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        function _runAfterHook() {
            return _ref3.apply(this, arguments);
        }

        return _runAfterHook;
    }();

    TestRun.prototype.start = function () {
        var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
            return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            TestRun.activeTestRuns[this.id] = this;

                            this.emit('start');

                            _context4.next = 4;
                            return this._runBeforeHook();

                        case 4:
                            if (!_context4.sent) {
                                _context4.next = 9;
                                break;
                            }

                            _context4.next = 7;
                            return this._executeTestFn(_state2.default.inTest, this.test.fn);

                        case 7:
                            _context4.next = 9;
                            return this._runAfterHook();

                        case 9:
                            _context4.next = 11;
                            return this.executeCommand(new _service.TestDoneCommand());

                        case 11:
                            this._addPendingPageErrorIfAny();

                            delete TestRun.activeTestRuns[this.id];

                            this.emit('done');

                        case 14:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, this);
        }));

        function start() {
            return _ref4.apply(this, arguments);
        }

        return start;
    }();

    // Errors


    TestRun.prototype._addPendingPageErrorIfAny = function _addPendingPageErrorIfAny() {
        if (this.pendingPageError) {
            this._addError(this.pendingPageError);
            this.pendingPageError = null;
            return true;
        }

        return false;
    };

    TestRun.prototype._addError = function _addError(err, screenshotPath) {
        var adapter = new _formattableAdapter2.default(err, {
            userAgent: this.browserConnection.userAgent,
            screenshotPath: screenshotPath || '',
            testRunState: this.state
        });

        this.errs.push(adapter);
    };

    // Task queue


    TestRun.prototype._enqueueCommand = function _enqueueCommand(command, callsite) {
        var _this2 = this;

        if (this.pendingRequest) this._resolvePendingRequest(command);

        return new _pinkie2.default(function (resolve, reject) {
            return _this2.driverTaskQueue.push({ command: command, resolve: resolve, reject: reject, callsite: callsite });
        });
    };

    TestRun.prototype._enqueueSetDialogHandlerCommand = function _enqueueSetDialogHandlerCommand(command, callsite) {
        this.dialogHandler = command.dialogHandler;

        return this._enqueueCommand(command, callsite);
    };

    TestRun.prototype._removeAllNonServiceTasks = function _removeAllNonServiceTasks() {
        this.driverTaskQueue = this.driverTaskQueue.filter(function (driverTask) {
            return (0, _utils.isServiceCommand)(driverTask.command);
        });

        this.browserManipulationQueue.removeAllNonServiceManipulations();
    };

    // Current driver task


    TestRun.prototype._resolveCurrentDriverTask = function _resolveCurrentDriverTask(result) {
        this.currentDriverTask.resolve(result);
        this.driverTaskQueue.shift();

        if (this.testDoneCommandQueued) this._removeAllNonServiceTasks();
    };

    TestRun.prototype._rejectCurrentDriverTask = function _rejectCurrentDriverTask(err) {
        err.callsite = err.callsite || this.driverTaskQueue[0].callsite;

        this.currentDriverTask.reject(err);
        this._removeAllNonServiceTasks();
    };

    // Pending request


    TestRun.prototype._clearPendingRequest = function _clearPendingRequest() {
        if (this.pendingRequest) {
            clearTimeout(this.pendingRequest.responseTimeout);
            this.pendingRequest = null;
        }
    };

    TestRun.prototype._resolvePendingRequest = function _resolvePendingRequest(command) {
        this.lastDriverStatusResponse = command;
        this.pendingRequest.resolve(command);
        this._clearPendingRequest();
    };

    // Handle driver request


    TestRun.prototype._fulfillCurrentDriverTask = function _fulfillCurrentDriverTask(driverStatus) {
        if (driverStatus.executionError) this._rejectCurrentDriverTask(driverStatus.executionError);else this._resolveCurrentDriverTask(driverStatus.result);
    };

    TestRun.prototype._handlePageErrorStatus = function _handlePageErrorStatus(pageError) {
        if (this.currentDriverTask && (0, _utils.isCommandRejectableByPageError)(this.currentDriverTask.command)) {
            this._rejectCurrentDriverTask(pageError);
            this.pendingPageError = null;

            return true;
        }

        this.pendingPageError = this.pendingPageError || pageError;

        return false;
    };

    TestRun.prototype._handleDriverRequest = function _handleDriverRequest(driverStatus) {
        var pageError = this.pendingPageError || driverStatus.pageError;

        var currentTaskRejectedByError = pageError && this._handlePageErrorStatus(pageError);

        if (!currentTaskRejectedByError && driverStatus.isCommandResult) {
            if (this.currentDriverTask.command.type === _type2.default.testDone) {
                this._resolveCurrentDriverTask();

                return TEST_DONE_CONFIRMATION_RESPONSE;
            }

            this._fulfillCurrentDriverTask(driverStatus);
        }

        return this.currentDriverTask ? this.currentDriverTask.command : null;
    };

    TestRun._transformResizeWindowToFitDeviceCommand = function _transformResizeWindowToFitDeviceCommand(command) {
        var _getViewportSize = (0, _testcafeBrowserTools.getViewportSize)(command.device),
            landscapeWidth = _getViewportSize.landscapeWidth,
            portraitWidth = _getViewportSize.portraitWidth;

        var portrait = command.options.portraitOrientation;
        var width = portrait ? portraitWidth : landscapeWidth;
        var height = portrait ? landscapeWidth : portraitWidth;

        return new _browserManipulation.ResizeWindowCommand({ width: width, height: height });
    };

    TestRun.prototype._maximizeBrowserWindow = function _maximizeBrowserWindow() {
        var browserId = this.browserConnection.id;
        var provider = this.browserConnection.provider;

        return provider.maximizeWindow(browserId);
    };

    // Execute command


    TestRun.prototype.executeCommand = function () {
        var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(command, callsite) {
            var browserId, provider, canResizeWindow;
            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            this.debugLog.command(command);

                            if (!(this.pendingPageError && (0, _utils.isCommandRejectableByPageError)(command))) {
                                _context5.next = 3;
                                break;
                            }

                            return _context5.abrupt('return', this._rejectCommandWithPageError(callsite));

                        case 3:

                            if (command.type === _type2.default.resizeWindowToFitDevice) command = TestRun._transformResizeWindowToFitDeviceCommand(command);

                            if (!(command.type === _type2.default.resizeWindow)) {
                                _context5.next = 12;
                                break;
                            }

                            browserId = this.browserConnection.id;
                            provider = this.browserConnection.provider;
                            _context5.next = 9;
                            return provider.canResizeWindowToDimensions(browserId, command.width, command.height);

                        case 9:
                            canResizeWindow = _context5.sent;

                            if (canResizeWindow) {
                                _context5.next = 12;
                                break;
                            }

                            return _context5.abrupt('return', _pinkie2.default.reject(new _testRun.WindowDimensionsOverflowError(callsite)));

                        case 12:
                            if (!(command.type === _type2.default.maximizeWindow)) {
                                _context5.next = 14;
                                break;
                            }

                            return _context5.abrupt('return', this._maximizeBrowserWindow());

                        case 14:
                            if (!(0, _utils.isBrowserManipulationCommand)(command)) {
                                _context5.next = 17;
                                break;
                            }

                            this.browserManipulationQueue.push(command);

                            return _context5.abrupt('return', this.executeCommand(new _service.PrepareBrowserManipulationCommand(command.type), callsite));

                        case 17:
                            if (!(command.type === _type2.default.wait)) {
                                _context5.next = 19;
                                break;
                            }

                            return _context5.abrupt('return', new _pinkie2.default(function (resolve) {
                                return setTimeout(resolve, command.timeout);
                            }));

                        case 19:

                            if (command.type === _type2.default.testDone) this.testDoneCommandQueued = true;

                            if (!(command.type === _type2.default.setNativeDialogHandler)) {
                                _context5.next = 22;
                                break;
                            }

                            return _context5.abrupt('return', this._enqueueSetDialogHandlerCommand(command, callsite));

                        case 22:
                            return _context5.abrupt('return', this._enqueueCommand(command, callsite));

                        case 23:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        function executeCommand(_x3, _x4) {
            return _ref5.apply(this, arguments);
        }

        return executeCommand;
    }();

    TestRun.prototype._rejectCommandWithPageError = function _rejectCommandWithPageError(callsite) {
        var err = this.pendingPageError;

        err.callsite = callsite;
        this.pendingPageError = null;

        return _pinkie2.default.reject(err);
    };

    (0, _createClass3.default)(TestRun, [{
        key: 'currentDriverTask',
        get: function get() {
            return this.driverTaskQueue[0];
        }
    }]);
    return TestRun;
}(_testcafeHammerhead.Session);

// Active test runs pool, used by client functions


exports.default = TestRun;
TestRun.activeTestRuns = {};

// Service message handlers
var ServiceMessages = TestRun.prototype;

ServiceMessages[_clientMessages2.default.ready] = function (msg) {
    var _this3 = this;

    this.debugLog.driverMessage(msg);

    this._clearPendingRequest();

    // NOTE: the driver sends the status for the second time if it didn't get a response at the
    // first try. This is possible when the page was unloaded after the driver sent the status.
    if (msg.status.id === this.lastDriverStatusId) return this.lastDriverStatusResponse;

    this.lastDriverStatusId = msg.status.id;
    this.lastDriverStatusResponse = this._handleDriverRequest(msg.status);

    if (this.lastDriverStatusResponse) return this.lastDriverStatusResponse;

    // NOTE: browsers abort an opened xhr request after a certain timeout (the actual duration depends on the browser).
    // To avoid this, we send an empty response after 2 minutes if we didn't get any command.
    var responseTimeout = setTimeout(function () {
        return _this3._resolvePendingRequest(null);
    }, MAX_RESPONSE_DELAY);

    return new _pinkie2.default(function (resolve, reject) {
        _this3.pendingRequest = { resolve: resolve, reject: reject, responseTimeout: responseTimeout };
    });
};

ServiceMessages[_clientMessages2.default.readyForBrowserManipulation] = function () {
    var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(msg) {
        return _regenerator2.default.wrap(function _callee6$(_context6) {
            while (1) {
                switch (_context6.prev = _context6.next) {
                    case 0:
                        this.debugLog.driverMessage(msg);

                        _context6.next = 3;
                        return this.browserManipulationQueue.executePendingManipulation(msg);

                    case 3:
                        return _context6.abrupt('return', _context6.sent);

                    case 4:
                    case 'end':
                        return _context6.stop();
                }
            }
        }, _callee6, this);
    }));

    return function (_x5) {
        return _ref6.apply(this, arguments);
    };
}();

ServiceMessages[_clientMessages2.default.waitForFileDownload] = function (msg) {
    var _this4 = this;

    this.debugLog.driverMessage(msg);

    return new _pinkie2.default(function (resolve) {
        if (_this4.fileDownloadingHandled) {
            _this4.fileDownloadingHandled = false;
            resolve(true);
        } else _this4.resolveWaitForFileDownloadingPromise = resolve;
    });
};
module.exports = exports['default'];