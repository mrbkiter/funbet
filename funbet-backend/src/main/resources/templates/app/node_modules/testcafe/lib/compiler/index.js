'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _stripBom = require('strip-bom');

var _stripBom2 = _interopRequireDefault(_stripBom);

var _testcafeLegacyApi = require('testcafe-legacy-api');

var _testcafeHammerhead = require('testcafe-hammerhead');

var _testcafeHammerhead2 = _interopRequireDefault(_testcafeHammerhead);

var _esNext = require('./es-next');

var _esNext2 = _interopRequireDefault(_esNext);

var _rawFile = require('./raw-file');

var _rawFile2 = _interopRequireDefault(_rawFile);

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _promisify = require('../utils/promisify');

var _promisify2 = _interopRequireDefault(_promisify);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var readFile = (0, _promisify2.default)(fs.readFile);

var SOURCE_CHUNK_LENGTH = 1000;
var BORROWED_TEST_PROPERTIES = ['skip', 'only', 'pageUrl', 'authCredentials'];

var Compiler = function () {
    function Compiler(sources) {
        (0, _classCallCheck3.default)(this, Compiler);

        this.sources = sources;
        this.esNextCompiler = new _esNext2.default();
        this.rawDataCompiler = new _rawFile2.default();

        this.compilers = [new _testcafeLegacyApi.Compiler(_testcafeHammerhead2.default.processScript), this.esNextCompiler, this.rawDataCompiler];
    }

    Compiler.prototype._compileFile = function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(filename) {
            var code, compiler;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            code = null;
                            _context.prev = 1;
                            _context.next = 4;
                            return readFile(filename);

                        case 4:
                            code = _context.sent;
                            _context.next = 10;
                            break;

                        case 7:
                            _context.prev = 7;
                            _context.t0 = _context['catch'](1);
                            throw new _runtime.GeneralError(_message2.default.cantFindSpecifiedTestSource, filename);

                        case 10:

                            code = (0, _stripBom2.default)(code).toString();

                            compiler = (0, _lodash.find)(this.compilers, function (c) {
                                return c.canCompile(code, filename);
                            });
                            return _context.abrupt('return', compiler ? compiler.compile(code, filename) : null);

                        case 13:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[1, 7]]);
        }));

        function _compileFile(_x) {
            return _ref.apply(this, arguments);
        }

        return _compileFile;
    }();

    Compiler.prototype.getTests = function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
            var _this = this;

            var sourceChunks, tests, compileUnits;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            sourceChunks = (0, _lodash.chunk)(this.sources, SOURCE_CHUNK_LENGTH);
                            tests = [];
                            compileUnits = [];

                            // NOTE: split sources into chunks because the fs module can't read all files
                            // simultaneously if the number of them is too large (several thousands).

                        case 3:
                            if (!sourceChunks.length) {
                                _context2.next = 12;
                                break;
                            }

                            compileUnits = sourceChunks.shift().map(function (filename) {
                                return _this._compileFile(filename);
                            });
                            _context2.t0 = tests;
                            _context2.next = 8;
                            return _pinkie2.default.all(compileUnits);

                        case 8:
                            _context2.t1 = _context2.sent;
                            tests = _context2.t0.concat.call(_context2.t0, _context2.t1);
                            _context2.next = 3;
                            break;

                        case 12:

                            this.esNextCompiler.cleanUpCache();

                            tests = (0, _lodash.flattenDeep)(tests).filter(function (test) {
                                return !!test;
                            });

                            tests.forEach(function (test) {
                                BORROWED_TEST_PROPERTIES.forEach(function (prop) {
                                    test[prop] = test[prop] || test.fixture[prop];
                                });
                            });

                            return _context2.abrupt('return', tests);

                        case 16:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function getTests() {
            return _ref2.apply(this, arguments);
        }

        return getTests;
    }();

    return Compiler;
}();

exports.default = Compiler;
module.exports = exports['default'];