'use strict';

exports.__esModule = true;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _readFileRelative = require('read-file-relative');

var _http = require('../../utils/http');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Const
var IDLE_PAGE_SCRIPT = (0, _readFileRelative.readSync)('../../client/browser/idle-page/index.js');
var IDLE_PAGE_STYLE = (0, _readFileRelative.readSync)('../../client/browser/idle-page/styles.css');
var IDLE_PAGE_LOGO = (0, _readFileRelative.readSync)('../../client/browser/idle-page/logo.svg', true);

// Gateway

var BrowserConnectionGateway = function () {
    function BrowserConnectionGateway(proxy) {
        (0, _classCallCheck3.default)(this, BrowserConnectionGateway);

        this.connections = {};
        this.domain = proxy.server1Info.domain;

        this._registerRoutes(proxy);
    }

    BrowserConnectionGateway.prototype._dispatch = function _dispatch(url, proxy, handler) {
        var _this = this;

        var method = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'GET';

        proxy[method](url, function (req, res, si, params) {
            var connection = _this.connections[params.id];

            (0, _http.preventCaching)(res);

            if (connection) handler(req, res, connection);else (0, _http.respond404)(res);
        });
    };

    BrowserConnectionGateway.prototype._registerRoutes = function _registerRoutes(proxy) {
        this._dispatch('/browser/connect/{id}', proxy, BrowserConnectionGateway.onConnection);
        this._dispatch('/browser/heartbeat/{id}', proxy, BrowserConnectionGateway.onHeartbeat);
        this._dispatch('/browser/idle/{id}', proxy, BrowserConnectionGateway.onIdle);
        this._dispatch('/browser/status/{id}', proxy, BrowserConnectionGateway.onStatusRequest);
        this._dispatch('/browser/init-script/{id}', proxy, BrowserConnectionGateway.onInitScriptRequest);
        this._dispatch('/browser/init-script/{id}', proxy, BrowserConnectionGateway.onInitScriptResponse, 'POST');

        proxy.GET('/browser/assets/index.js', { content: IDLE_PAGE_SCRIPT, contentType: 'application/x-javascript' });
        proxy.GET('/browser/assets/styles.css', { content: IDLE_PAGE_STYLE, contentType: 'text/css' });
        proxy.GET('/browser/assets/logo.svg', { content: IDLE_PAGE_LOGO, contentType: 'image/svg+xml' });
    };

    // Helpers


    BrowserConnectionGateway.ensureConnectionReady = function ensureConnectionReady(res, connection) {
        if (!connection.ready) {
            (0, _http.respond500)(res, 'The connection is not ready yet.');
            return false;
        }

        return true;
    };

    // Route handlers


    BrowserConnectionGateway.onConnection = function onConnection(req, res, connection) {
        if (connection.ready) (0, _http.respond500)(res, 'The connection is already established.');else {
            var userAgent = req.headers['user-agent'];

            connection.establish(userAgent);
            (0, _http.redirect)(res, connection.idleUrl);
        }
    };

    BrowserConnectionGateway.onHeartbeat = function onHeartbeat(req, res, connection) {
        if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) {
            connection.heartbeat();
            res.end();
        }
    };

    BrowserConnectionGateway.onIdle = function onIdle(req, res, connection) {
        if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) res.end(connection.renderIdlePage());
    };

    BrowserConnectionGateway.onStatusRequest = function onStatusRequest(req, res, connection) {
        if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) {
            var status = connection.getStatus();

            (0, _http.respondWithJSON)(res, status);
        }
    };

    BrowserConnectionGateway.onInitScriptRequest = function onInitScriptRequest(req, res, connection) {
        if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) {
            var script = connection.getInitScript();

            (0, _http.respondWithJSON)(res, script);
        }
    };

    BrowserConnectionGateway.onInitScriptResponse = function onInitScriptResponse(req, res, connection) {
        if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) {
            var data = '';

            req.on('data', function (chunk) {
                data += chunk;
            });

            req.on('end', function () {
                connection.handleInitScriptResult(data);

                res.end();
            });
        }
    };

    // API


    BrowserConnectionGateway.prototype.startServingConnection = function startServingConnection(connection) {
        this.connections[connection.id] = connection;
    };

    BrowserConnectionGateway.prototype.stopServingConnection = function stopServingConnection(connection) {
        delete this.connections[connection.id];
    };

    BrowserConnectionGateway.prototype.close = function close() {
        var _this2 = this;

        (0, _keys2.default)(this.connections).forEach(function (id) {
            return _this2.connections[id].close();
        });
    };

    return BrowserConnectionGateway;
}();

exports.default = BrowserConnectionGateway;
module.exports = exports['default'];