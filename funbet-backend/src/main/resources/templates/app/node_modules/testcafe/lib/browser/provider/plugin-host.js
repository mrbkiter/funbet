'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _connection = require('../connection');

var _connection2 = _interopRequireDefault(_connection);

var _message = require('../../warnings/message');

var _message2 = _interopRequireDefault(_message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var name = (0, _symbol2.default)(); /* global Symbol */

var BrowserProviderPluginHost = function () {
    function BrowserProviderPluginHost(providerObject, providerName) {
        (0, _classCallCheck3.default)(this, BrowserProviderPluginHost);

        (0, _lodash.assignIn)(this, providerObject);

        this[name] = providerName;
    }

    // Helpers


    BrowserProviderPluginHost.prototype.runInitScript = function runInitScript(browserId, code) {
        var connection = _connection2.default.getById(browserId);

        return connection.runInitScript('(' + code + ')()');
    };

    BrowserProviderPluginHost.prototype.waitForConnectionReady = function waitForConnectionReady(browserId) {
        var connection = _connection2.default.getById(browserId);

        if (connection.ready) return _pinkie2.default.resolve();

        return (0, _promisifyEvent2.default)(connection, 'ready');
    };

    BrowserProviderPluginHost.prototype.reportWarning = function reportWarning(browserId) {
        var connection = _connection2.default.getById(browserId);

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        connection.addWarning.apply(connection, args);
    };

    BrowserProviderPluginHost.prototype.setUserAgentMetaInfo = function setUserAgentMetaInfo(browserId, message) {
        var connection = _connection2.default.getById(browserId);

        connection.setProviderMetaInfo(message);
    };

    // API
    // Browser control


    BrowserProviderPluginHost.prototype.openBrowser = function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            throw new Error('Not implemented!');

                        case 1:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function openBrowser() {
            return _ref.apply(this, arguments);
        }

        return openBrowser;
    }();

    BrowserProviderPluginHost.prototype.closeBrowser = function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            throw new Error('Not implemented!');

                        case 1:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function closeBrowser() {
            return _ref2.apply(this, arguments);
        }

        return closeBrowser;
    }();

    // Initialization


    BrowserProviderPluginHost.prototype.init = function () {
        var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            return _context3.abrupt('return');

                        case 1:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        function init() {
            return _ref3.apply(this, arguments);
        }

        return init;
    }();

    BrowserProviderPluginHost.prototype.dispose = function () {
        var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
            return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            return _context4.abrupt('return');

                        case 1:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, this);
        }));

        function dispose() {
            return _ref4.apply(this, arguments);
        }

        return dispose;
    }();

    // Browser names handling


    BrowserProviderPluginHost.prototype.getBrowserList = function () {
        var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            throw new Error('Not implemented!');

                        case 1:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        function getBrowserList() {
            return _ref5.apply(this, arguments);
        }

        return getBrowserList;
    }();

    BrowserProviderPluginHost.prototype.isValidBrowserName = function () {
        var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
            return _regenerator2.default.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            return _context6.abrupt('return', true);

                        case 1:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, this);
        }));

        function isValidBrowserName() {
            return _ref6.apply(this, arguments);
        }

        return isValidBrowserName;
    }();

    // Extra functions


    BrowserProviderPluginHost.prototype.isLocalBrowser = function () {
        var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
            return _regenerator2.default.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            return _context7.abrupt('return', false);

                        case 1:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, this);
        }));

        function isLocalBrowser() {
            return _ref7.apply(this, arguments);
        }

        return isLocalBrowser;
    }();

    BrowserProviderPluginHost.prototype.hasCustomActionForBrowser = function () {
        var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
            return _regenerator2.default.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            return _context8.abrupt('return', {
                                hasResizeWindow: this.hasOwnProperty('resizeWindow'),
                                hasTakeScreenshot: this.hasOwnProperty('takeScreenshot'),
                                hasCanResizeWindowToDimensions: this.hasOwnProperty('canResizeWindowToDimensions'),
                                hasMaximizeWindow: this.hasOwnProperty('maximizeWindow')
                            });

                        case 1:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee8, this);
        }));

        function hasCustomActionForBrowser() {
            return _ref8.apply(this, arguments);
        }

        return hasCustomActionForBrowser;
    }();

    BrowserProviderPluginHost.prototype.resizeWindow = function () {
        var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9() {
            return _regenerator2.default.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            this.reportWarning(_message2.default.resizeNotSupportedByBrowserProvider, this[name]);

                        case 1:
                        case 'end':
                            return _context9.stop();
                    }
                }
            }, _callee9, this);
        }));

        function resizeWindow() {
            return _ref9.apply(this, arguments);
        }

        return resizeWindow;
    }();

    BrowserProviderPluginHost.prototype.canResizeWindowToDimensions = function () {
        var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10() {
            return _regenerator2.default.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            return _context10.abrupt('return', true);

                        case 1:
                        case 'end':
                            return _context10.stop();
                    }
                }
            }, _callee10, this);
        }));

        function canResizeWindowToDimensions() {
            return _ref10.apply(this, arguments);
        }

        return canResizeWindowToDimensions;
    }();

    BrowserProviderPluginHost.prototype.takeScreenshot = function () {
        var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11() {
            return _regenerator2.default.wrap(function _callee11$(_context11) {
                while (1) {
                    switch (_context11.prev = _context11.next) {
                        case 0:
                            this.reportWarning(_message2.default.screenshotNotSupportedByBrowserProvider, this[name]);

                        case 1:
                        case 'end':
                            return _context11.stop();
                    }
                }
            }, _callee11, this);
        }));

        function takeScreenshot() {
            return _ref11.apply(this, arguments);
        }

        return takeScreenshot;
    }();

    BrowserProviderPluginHost.prototype.maximizeWindow = function () {
        var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12() {
            return _regenerator2.default.wrap(function _callee12$(_context12) {
                while (1) {
                    switch (_context12.prev = _context12.next) {
                        case 0:
                            this.reportWarning(_message2.default.maximizeNotSupportedByBrowserProvider, this[name]);

                        case 1:
                        case 'end':
                            return _context12.stop();
                    }
                }
            }, _callee12, this);
        }));

        function maximizeWindow() {
            return _ref12.apply(this, arguments);
        }

        return maximizeWindow;
    }();

    return BrowserProviderPluginHost;
}();

exports.default = BrowserProviderPluginHost;
module.exports = exports['default'];