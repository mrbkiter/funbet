'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _qrcodeTerminal = require('qrcode-terminal');

var _qrcodeTerminal2 = _interopRequireDefault(_qrcodeTerminal);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(testCafe, remoteCount, showQRCode) {
        var connections, description, i, browserConnection;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        connections = [];

                        if (!remoteCount) {
                            _context.next = 21;
                            break;
                        }

                        _log2.default.hideSpinner();

                        description = (0, _dedent2.default)('\n            Connecting ' + remoteCount + ' remote browser(s)...\n            Navigate to the appropriate URL from each of the remote browsers.\n        ');


                        _log2.default.write(description);

                        if (showQRCode) _log2.default.write('You can either enter the URL or scan the QR-code.');

                        i = 0;

                    case 7:
                        if (!(i < remoteCount)) {
                            _context.next = 20;
                            break;
                        }

                        _context.next = 10;
                        return testCafe.createBrowserConnection();

                    case 10:
                        browserConnection = _context.sent;


                        _log2.default.write('Browser #' + (i + 1) + ': ' + _chalk2.default.underline.blue(browserConnection.url));

                        if (showQRCode) _qrcodeTerminal2.default.generate(browserConnection.url);

                        _context.next = 15;
                        return (0, _promisifyEvent2.default)(browserConnection, 'ready');

                    case 15:

                        connections.push(browserConnection);
                        _log2.default.write(_chalk2.default.green('CONNECTED') + ' ' + browserConnection.userAgent + '\n');

                    case 17:
                        i++;
                        _context.next = 7;
                        break;

                    case 20:

                        _log2.default.showSpinner();

                    case 21:
                        return _context.abrupt('return', connections);

                    case 22:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function (_x, _x2, _x3) {
        return _ref.apply(this, arguments);
    };
}();

module.exports = exports['default'];