'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _processTestFnError = require('../errors/process-test-fn-error');

var _processTestFnError2 = _interopRequireDefault(_processTestFnError);

var _fromObject = require('../test-run/commands/from-object');

var _fromObject2 = _interopRequireDefault(_fromObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RawFileCompiler = function () {
    function RawFileCompiler() {
        (0, _classCallCheck3.default)(this, RawFileCompiler);
    }

    RawFileCompiler.prototype.canCompile = function canCompile(code, filename) {
        return (/\.testcafe$/.test(filename)
        );
    };

    RawFileCompiler._createTestFn = function _createTestFn(commands) {
        var _this = this;

        return function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(testRun) {
                var i, callsite, command;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                i = 0;

                            case 1:
                                if (!(i < commands.length)) {
                                    _context.next = 17;
                                    break;
                                }

                                callsite = commands[i] && commands[i].callsite;
                                command = null;
                                _context.prev = 4;

                                command = (0, _fromObject2.default)(commands[i]);
                                _context.next = 8;
                                return testRun.executeCommand(command, callsite);

                            case 8:
                                _context.next = 14;
                                break;

                            case 10:
                                _context.prev = 10;
                                _context.t0 = _context['catch'](4);

                                _context.t0.callsite = callsite;
                                throw (0, _processTestFnError2.default)(_context.t0);

                            case 14:
                                i++;
                                _context.next = 1;
                                break;

                            case 17:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this, [[4, 10]]);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }();
    };

    RawFileCompiler._compileTest = function _compileTest(fixture, test) {
        test.fixture = fixture;
        test.fn = RawFileCompiler._createTestFn(test.commands);

        if (test.beforeCommands) test.beforeFn = RawFileCompiler._createTestFn(test.beforeCommands);

        if (test.afterCommands) test.afterFn = RawFileCompiler._createTestFn(test.afterCommands);

        return test;
    };

    RawFileCompiler.prototype.compile = function compile(code, filename) {
        var data = null;

        try {
            data = JSON.parse(code);
        } catch (err) {
            throw new _runtime.GeneralError(_message2.default.cannotParseRawFile, filename, err.toString());
        }

        var fixtures = data.fixtures;
        var tests = [];

        fixtures.forEach(function (fixture) {
            fixture.path = filename;
            fixture.tests = fixture.tests.map(function (test) {
                return RawFileCompiler._compileTest(fixture, test);
            });
            tests = tests.concat(fixture.tests);

            if (fixture.beforeEachCommands) fixture.beforeEachFn = RawFileCompiler._createTestFn(fixture.beforeEachCommands);

            if (fixture.afterEachCommands) fixture.afterEachFn = RawFileCompiler._createTestFn(fixture.afterEachCommands);
        });

        return tests;
    };

    return RawFileCompiler;
}();

exports.default = RawFileCompiler;
module.exports = exports['default'];