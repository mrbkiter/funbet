'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _events = require('events');

var _testcafeLegacyApi = require('testcafe-legacy-api');

var _testRun = require('../test-run');

var _testRun2 = _interopRequireDefault(_testRun);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Const
var QUARANTINE_THRESHOLD = 3;

// Browser job

var BrowserJob = function (_EventEmitter) {
    (0, _inherits3.default)(BrowserJob, _EventEmitter);

    function BrowserJob(tests, browserConnection, proxy, screenshots, warningLog, opts) {
        (0, _classCallCheck3.default)(this, BrowserJob);

        var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));

        _this.started = false;
        _this.quarantine = null;

        _this.opts = opts;
        _this.proxy = proxy;
        _this.browserConnection = browserConnection;
        _this.screenshots = screenshots;
        _this.warningLog = warningLog;

        _this.testRunQueue = tests.map(function (test, index) {
            return _this._createTestRun(test, index + 1, 1);
        });
        return _this;
    }

    BrowserJob.prototype._shouldStartQuarantine = function _shouldStartQuarantine(testRun) {
        return !this.quarantine && testRun.errs.length;
    };

    BrowserJob.prototype._startQuarantine = function _startQuarantine(testRun, testIndex) {
        this.quarantine = { passed: 0, failed: 1 };
        this._keepInQuarantine(testRun, testIndex);
    };

    BrowserJob.prototype._endQuarantine = function _endQuarantine(testRun) {
        testRun.unstable = this.quarantine.passed > 0;
        this.quarantine = null;

        this._reportTestRunDone(testRun);
    };

    BrowserJob.prototype._shouldKeepInQuarantine = function _shouldKeepInQuarantine(testRun) {
        if (testRun.errs.length) this.quarantine.failed++;else this.quarantine.passed++;

        return this.quarantine.failed < QUARANTINE_THRESHOLD && this.quarantine.passed < QUARANTINE_THRESHOLD;
    };

    BrowserJob.prototype._keepInQuarantine = function _keepInQuarantine(testRun, testIndex) {
        var quarantineAttemptNum = this.quarantine.failed + this.quarantine.passed + 1;
        var nextAttempt = this._createTestRun(testRun.test, testIndex, quarantineAttemptNum);

        this.testRunQueue.splice(0, 0, nextAttempt);
    };

    BrowserJob.prototype._testRunDoneInQuarantineMode = function _testRunDoneInQuarantineMode(testRun, testIndex) {
        this.proxy.closeSession(testRun);

        if (this._shouldStartQuarantine(testRun)) this._startQuarantine(testRun, testIndex);else if (this.quarantine) {
            if (this._shouldKeepInQuarantine(testRun)) this._keepInQuarantine(testRun, testIndex);else this._endQuarantine(testRun);
        } else this._reportTestRunDone(testRun);
    };

    BrowserJob.prototype._testRunDone = function _testRunDone(testRun) {
        this.proxy.closeSession(testRun);
        this._reportTestRunDone(testRun);
    };

    BrowserJob.prototype._reportTestRunDone = function _reportTestRunDone(testRun) {
        this.emit('test-run-done', testRun);

        if (!this.hasQueuedTestRuns) this.emit('done');
    };

    BrowserJob.prototype._createTestRun = function _createTestRun(test, testIndex, quarantineAttemptNum) {
        var _this2 = this;

        quarantineAttemptNum = this.opts.quarantineMode ? quarantineAttemptNum : null;

        var TestRunCtor = test.isLegacy ? _testcafeLegacyApi.TestRun : _testRun2.default;
        var screenshotCapturer = this.screenshots.createCapturerFor(test, testIndex, quarantineAttemptNum, this.browserConnection);
        var testRun = new TestRunCtor(test, this.browserConnection, screenshotCapturer, this.warningLog, this.opts);
        var done = this.opts.quarantineMode ? function () {
            return _this2._testRunDoneInQuarantineMode(testRun, testIndex);
        } : function () {
            return _this2._testRunDone(testRun);
        };

        testRun.once('start', function () {
            return _this2.emit('test-run-start', testRun);
        });
        testRun.once('done', done);

        return testRun;
    };

    // API


    BrowserJob.prototype.popNextTestRunUrl = function popNextTestRunUrl() {
        for (var testRun = this.testRunQueue.shift(); testRun; testRun = this.testRunQueue.shift()) {
            if (!this.started) {
                this.started = true;
                this.emit('start');
            }

            if (testRun.test.skip) this._reportTestRunDone(testRun);else {
                testRun.start();

                return this.proxy.openSession(testRun.test.pageUrl, testRun);
            }
        }

        return null;
    };

    (0, _createClass3.default)(BrowserJob, [{
        key: 'hasQueuedTestRuns',
        get: function get() {
            return !!this.testRunQueue.length;
        }
    }]);
    return BrowserJob;
}(_events.EventEmitter);

exports.default = BrowserJob;
module.exports = exports['default'];