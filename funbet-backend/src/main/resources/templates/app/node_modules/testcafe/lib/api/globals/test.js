'use strict';

exports.__esModule = true;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _runtime = require('../../errors/runtime');

var _message = require('../../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _testingUnit = require('./testing-unit');

var _testingUnit2 = _interopRequireDefault(_testingUnit);

var _typeAssertions = require('../../errors/runtime/type-assertions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Test = function (_TestingUnit) {
    (0, _inherits3.default)(Test, _TestingUnit);

    function Test(globals) {
        var _ret;

        (0, _classCallCheck3.default)(this, Test);

        var _this = (0, _possibleConstructorReturn3.default)(this, _TestingUnit.call(this, globals));

        _this.fixture = globals.currentFixture;

        _this.fn = null;
        _this.beforeFn = null;
        _this.afterFn = null;

        return _ret = _this.apiOrigin, (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    Test.prototype._add = function _add(name, fn) {
        var nameType = typeof name === 'undefined' ? 'undefined' : (0, _typeof3.default)(name);

        if (nameType !== 'string') throw new _runtime.APIError('apiOrigin', _message2.default.testNameIsNotAString, nameType);

        var fnType = typeof fn === 'undefined' ? 'undefined' : (0, _typeof3.default)(fn);

        if (fnType !== 'function') throw new _runtime.APIError('apiOrigin', _message2.default.testBodyIsNotAFunction, fnType);

        this.name = name;
        this.fn = _testingUnit2.default._wrapTestFunction(fn);

        if (this.globals.collectedTests.indexOf(this) < 0) this.globals.collectedTests.push(this);

        return this.apiOrigin;
    };

    Test.prototype._before$ = function _before$(fn) {
        (0, _typeAssertions.assertFunction)('before', 'test.before hook', fn);

        this.beforeFn = _testingUnit2.default._wrapTestFunction(fn);

        return this.apiOrigin;
    };

    Test.prototype._after$ = function _after$(fn) {
        (0, _typeAssertions.assertFunction)('after', 'test.after hook', fn);

        this.afterFn = _testingUnit2.default._wrapTestFunction(fn);

        return this.apiOrigin;
    };

    return Test;
}(_testingUnit2.default);

exports.default = Test;


_testingUnit2.default._makeAPIListForChildClass(Test);
module.exports = exports['default'];