'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _path = require('path');

var _promisify = require('../utils/promisify');

var _promisify2 = _interopRequireDefault(_promisify);

var _sanitizeFilename = require('sanitize-filename');

var _sanitizeFilename2 = _interopRequireDefault(_sanitizeFilename);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _testcafeBrowserTools = require('testcafe-browser-tools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ensureDir = (0, _promisify2.default)(_mkdirp2.default);

var PNG_EXTENSION_RE = /(\.png)$/;

var Capturer = function () {
    function Capturer(baseScreenshotsPath, testEntry, connection, namingOptions) {
        (0, _classCallCheck3.default)(this, Capturer);

        this.enabled = !!baseScreenshotsPath;
        this.baseScreenshotsPath = baseScreenshotsPath;
        this.testEntry = testEntry;
        this.provider = connection.provider;
        this.browserId = connection.id;
        this.baseDirName = namingOptions.baseDirName;
        this.userAgentName = namingOptions.userAgentName;
        this.quarantineAttemptNum = namingOptions.quarantineAttemptNum;
        this.testIndex = namingOptions.testIndex;
        this.screenshotIndex = 1;
        this.errorScreenshotIndex = 1;
        this.pathCustomized = false;
    }

    Capturer._correctFilePath = function _correctFilePath(path) {
        var correctedPath = path.replace(/\\/g, '/').split('/').map(function (str) {
            return (0, _sanitizeFilename2.default)(str);
        }).join('/');

        return PNG_EXTENSION_RE.test(correctedPath) ? correctedPath : correctedPath + '.png';
    };

    Capturer.prototype._getFileName = function _getFileName(forError) {
        var fileName = (forError ? this.errorScreenshotIndex : this.screenshotIndex) + '.png';

        if (forError) this.errorScreenshotIndex++;else this.screenshotIndex++;

        return fileName;
    };

    Capturer.prototype._getSreenshotPath = function _getSreenshotPath(fileName, customPath) {
        var pathForReport = this.baseScreenshotsPath;
        var screenshotPath = null;

        if (customPath) {
            this.pathCustomized = true;
            screenshotPath = (0, _path.join)(this.baseScreenshotsPath, Capturer._correctFilePath(customPath));
        } else {
            var testDirName = 'test-' + this.testIndex;
            var path = (0, _path.join)(this.baseScreenshotsPath, this.baseDirName, testDirName);

            // NOTE: if test contains takeScreenshot action with custom path
            // we should specify the most common screenshot folder in report
            if (!this.pathCustomized) pathForReport = path;

            if (this.quarantineAttemptNum !== null) path = (0, _path.join)(path, 'run-' + this.quarantineAttemptNum);

            screenshotPath = (0, _path.join)(path, this.userAgentName, fileName);
        }

        return { pathForReport: pathForReport, screenshotPath: screenshotPath };
    };

    Capturer.prototype._takeScreenshot = function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(filePath, pageWidth, pageHeight) {
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return ensureDir((0, _path.dirname)(filePath));

                        case 2:
                            _context.next = 4;
                            return this.provider.takeScreenshot(this.browserId, filePath, pageWidth, pageHeight);

                        case 4:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function _takeScreenshot(_x, _x2, _x3) {
            return _ref.apply(this, arguments);
        }

        return _takeScreenshot;
    }();

    Capturer.prototype.captureAction = function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(_ref3) {
            var customPath = _ref3.customPath,
                pageWidth = _ref3.pageWidth,
                pageHeight = _ref3.pageHeight;

            var fileName, _getSreenshotPath2, pathForReport, screenshotPath;

            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (this.enabled) {
                                _context2.next = 2;
                                break;
                            }

                            return _context2.abrupt('return', null);

                        case 2:
                            fileName = this._getFileName(false);
                            _getSreenshotPath2 = this._getSreenshotPath(fileName, customPath), pathForReport = _getSreenshotPath2.pathForReport, screenshotPath = _getSreenshotPath2.screenshotPath;


                            this.testEntry.path = pathForReport;

                            _context2.next = 7;
                            return this._takeScreenshot(screenshotPath, pageWidth, pageHeight);

                        case 7:

                            this.testEntry.hasScreenshots = true;

                            _context2.next = 10;
                            return (0, _testcafeBrowserTools.generateThumbnail)(screenshotPath);

                        case 10:
                            return _context2.abrupt('return', screenshotPath);

                        case 11:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function captureAction(_x4) {
            return _ref2.apply(this, arguments);
        }

        return captureAction;
    }();

    Capturer.prototype.captureError = function () {
        var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(_ref5) {
            var screenshotRequired = _ref5.screenshotRequired,
                pageWidth = _ref5.pageWidth,
                pageHeight = _ref5.pageHeight;

            var fileName, _getSreenshotPath3, screenshotPath;

            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            if (!(!screenshotRequired || !this.enabled)) {
                                _context3.next = 2;
                                break;
                            }

                            return _context3.abrupt('return', null);

                        case 2:
                            fileName = this._getFileName(true);
                            _getSreenshotPath3 = this._getSreenshotPath((0, _path.join)('errors', fileName)), screenshotPath = _getSreenshotPath3.screenshotPath;
                            _context3.next = 6;
                            return this._takeScreenshot(screenshotPath, pageWidth, pageHeight);

                        case 6:
                            _context3.next = 8;
                            return (0, _testcafeBrowserTools.generateThumbnail)(screenshotPath);

                        case 8:
                            return _context3.abrupt('return', screenshotPath);

                        case 9:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        function captureError(_x5) {
            return _ref4.apply(this, arguments);
        }

        return captureError;
    }();

    return Capturer;
}();

exports.default = Capturer;
module.exports = exports['default'];