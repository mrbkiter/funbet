'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _path = require('path');

var _commander = require('commander');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

var _isGlob = require('is-glob');

var _isGlob2 = _interopRequireDefault(_isGlob);

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _readFileRelative = require('read-file-relative');

var _promisify = require('../utils/promisify');

var _promisify2 = _interopRequireDefault(_promisify);

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _getViewportWidth = require('../utils/get-viewport-width');

var _getViewportWidth2 = _interopRequireDefault(_getViewportWidth);

var _string = require('../utils/string');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ensureDir = (0, _promisify2.default)(_mkdirp2.default);
var stat = (0, _promisify2.default)(_fs2.default.stat);

var REMOTE_ALIAS_RE = /^remote(?::(\d*))?$/;
var DEFAULT_TEST_LOOKUP_DIRS = _osFamily2.default.win ? ['test/', 'tests/'] : ['test/', 'tests/', 'Test/', 'Tests/'];

var DESCRIPTION = (0, _dedent2.default)('\n    In the browser list, you can use browser names (e.g. "ie9", "chrome", etc.) as well as paths to executables.\n\n    To run tests against all installed browsers, use the "all" alias.\n\n    To use a remote browser connection (e.g., to connect a mobile device), specify "remote" as the browser alias.\n    If you need to connect multiple devices, add a colon and the number of browsers you want to connect (e.g., "remote:3").\n\n    To run tests in a browser accessed through a browser provider plugin, specify a browser alias that consists of two parts - the browser provider name prefix and the name of the browser itself; for example, "saucelabs:chrome@51".\n\n    You can use one or more file paths or glob patterns to specify which tests to run.\n\n    More info: https://devexpress.github.io/testcafe/documentation\n');

var CLIArgumentParser = function () {
    function CLIArgumentParser(cwd) {
        (0, _classCallCheck3.default)(this, CLIArgumentParser);

        this.program = new _commander.Command('testcafe');

        this.cwd = cwd || process.cwd();

        this.src = null;
        this.browsers = null;
        this.filter = null;
        this.remoteCount = 0;
        this.opts = null;

        this._describeProgram();
    }

    CLIArgumentParser._isInteger = function _isInteger(value) {
        return !isNaN(value) && isFinite(value);
    };

    CLIArgumentParser._parsePortNumber = function _parsePortNumber(value) {
        if (CLIArgumentParser._isInteger(value)) return parseInt(value, 10);

        throw new _runtime.GeneralError(_message2.default.portNumberIsNotInteger);
    };

    CLIArgumentParser._optionValueToRegExp = function _optionValueToRegExp(name, value) {
        if (value === void 0) return value;

        try {
            return new RegExp(value);
        } catch (err) {
            throw new _runtime.GeneralError(_message2.default.optionValueIsNotValidRegExp, name);
        }
    };

    CLIArgumentParser._getDescription = function _getDescription() {
        // NOTE: add empty line to workaround commander-forced indentation on the first line.
        return '\n' + (0, _string.wordWrap)(DESCRIPTION, 2, (0, _getViewportWidth2.default)(process.stdout));
    };

    CLIArgumentParser.prototype._describeProgram = function _describeProgram() {
        var version = JSON.parse((0, _readFileRelative.readSync)('../../package.json')).version;

        this.program.version(version, '-v, --version').usage('[options] <comma-separated-browser-list> <file-or-glob ...>').description(CLIArgumentParser._getDescription()).option('-b, --list-browsers [provider]', 'output the aliases for local browsers or browsers available through the specified browser provider').option('-r, --reporter <name>', 'specify the reporter type to use').option('-s, --screenshots <path>', 'enable screenshot capturing and specify the path to save the screenshots to').option('-S, --screenshots-on-fails', 'take a screenshot whenever a test fails').option('-q, --quarantine-mode', 'enable the quarantine mode').option('-e, --skip-js-errors', 'make tests not fail when a JS error happens on a page').option('-t, --test <name>', 'run only tests with the specified name').option('-T, --test-grep <pattern>', 'run only tests matching the specified pattern').option('-f, --fixture <name>', 'run only fixtures with the specified name').option('-F, --fixture-grep <pattern>', 'run only fixtures matching the specified pattern').option('-a, --app <command>', 'launch the tested app using the specified command before running tests').option('--app-init-delay <ms>', 'specify how much time it takes for the tested app to initialize').option('--selector-timeout <ms>', 'set the amount of time within which selectors make attempts to obtain a node to be returned').option('--assertion-timeout <ms>', 'set the amount of time within which assertion should pass').option('--speed <factor>', 'set the speed of test execution (0.01 ... 1)').option('--ports <port1,port2>', 'specify custom port numbers').option('--hostname <name>', 'specify the hostname').option('--qr-code', 'outputs QR-code that repeats URLs used to connect the remote browsers')

        // NOTE: these options will be handled by chalk internally
        .option('--color', 'force colors in command line').option('--no-color', 'disable colors in command line');
    };

    CLIArgumentParser.prototype._filterAndCountRemotes = function _filterAndCountRemotes(browser) {
        var remoteMatch = browser.match(REMOTE_ALIAS_RE);

        if (remoteMatch) {
            this.remoteCount += parseInt(remoteMatch[1], 10) || 1;
            return false;
        }

        return true;
    };

    CLIArgumentParser.prototype._parseFilteringOptions = function _parseFilteringOptions() {
        var _this = this;

        this.opts.testGrep = CLIArgumentParser._optionValueToRegExp('--test-grep', this.opts.testGrep);
        this.opts.fixtureGrep = CLIArgumentParser._optionValueToRegExp('--fixture-grep', this.opts.fixtureGrep);

        this.filter = function (testName, fixtureName) {

            if (_this.opts.test && testName !== _this.opts.test) return false;

            if (_this.opts.testGrep && !_this.opts.testGrep.test(testName)) return false;

            if (_this.opts.fixture && fixtureName !== _this.opts.fixture) return false;

            if (_this.opts.fixtureGrep && !_this.opts.fixtureGrep.test(fixtureName)) return false;

            return true;
        };
    };

    CLIArgumentParser.prototype._parseAppInitDelay = function _parseAppInitDelay() {
        if (this.opts.appInitDelay) {
            if (CLIArgumentParser._isInteger(this.opts.appInitDelay)) this.opts.appInitDelay = parseInt(this.opts.appInitDelay, 10);else throw new _runtime.GeneralError(_message2.default.appInitDelayIsNotAnInteger);
        }
    };

    CLIArgumentParser.prototype._parseSelectorTimeout = function _parseSelectorTimeout() {
        if (this.opts.selectorTimeout) {
            if (CLIArgumentParser._isInteger(this.opts.selectorTimeout)) this.opts.selectorTimeout = parseInt(this.opts.selectorTimeout, 10);else throw new _runtime.GeneralError(_message2.default.selectorTimeoutIsNotAnInteger);
        }
    };

    CLIArgumentParser.prototype._parseAssertionTimeout = function _parseAssertionTimeout() {
        if (this.opts.assertionTimeout) {
            if (CLIArgumentParser._isInteger(this.opts.assertionTimeout)) this.opts.assertionTimeout = parseInt(this.opts.assertionTimeout, 10);else throw new _runtime.GeneralError(_message2.default.assertionTimeoutIsNotAnInteger);
        }
    };

    CLIArgumentParser.prototype._parseSpeed = function _parseSpeed() {
        if (this.opts.speed) this.opts.speed = parseFloat(this.opts.speed);
    };

    CLIArgumentParser.prototype._parsePorts = function _parsePorts() {
        if (this.opts.ports) {
            this.opts.ports = this.opts.ports.split(',').map(CLIArgumentParser._parsePortNumber);

            if (this.opts.ports.length < 2) throw new _runtime.GeneralError(_message2.default.portsOptionRequiresTwoNumbers);
        }
    };

    CLIArgumentParser.prototype._parseBrowserList = function _parseBrowserList() {
        var _this2 = this;

        var browsersArg = this.program.args[0] || '';

        this.browsers = (0, _string.splitQuotedText)(browsersArg, ',').filter(function (browser) {
            return browser && _this2._filterAndCountRemotes(browser);
        });
    };

    CLIArgumentParser.prototype._convertDirsToGlobs = function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(fileList) {
            var _this3 = this;

            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return _pinkie2.default.all(fileList.map(function () {
                                var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(file) {
                                    var absPath, fileStat;
                                    return _regenerator2.default.wrap(function _callee$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    if ((0, _isGlob2.default)(file)) {
                                                        _context.next = 14;
                                                        break;
                                                    }

                                                    absPath = (0, _path.resolve)(_this3.cwd, file);
                                                    fileStat = null;
                                                    _context.prev = 3;
                                                    _context.next = 6;
                                                    return stat(absPath);

                                                case 6:
                                                    fileStat = _context.sent;
                                                    _context.next = 12;
                                                    break;

                                                case 9:
                                                    _context.prev = 9;
                                                    _context.t0 = _context['catch'](3);
                                                    return _context.abrupt('return', null);

                                                case 12:
                                                    if (!fileStat.isDirectory()) {
                                                        _context.next = 14;
                                                        break;
                                                    }

                                                    return _context.abrupt('return', (0, _path.join)(file, './**/*@(.js|.testcafe)'));

                                                case 14:
                                                    return _context.abrupt('return', file);

                                                case 15:
                                                case 'end':
                                                    return _context.stop();
                                            }
                                        }
                                    }, _callee, _this3, [[3, 9]]);
                                }));

                                return function (_x2) {
                                    return _ref2.apply(this, arguments);
                                };
                            }()));

                        case 2:
                            fileList = _context2.sent;
                            return _context2.abrupt('return', fileList.filter(function (file) {
                                return !!file;
                            }));

                        case 4:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function _convertDirsToGlobs(_x) {
            return _ref.apply(this, arguments);
        }

        return _convertDirsToGlobs;
    }();

    CLIArgumentParser.prototype._parseFileList = function () {
        var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
            var _this4 = this;

            var fileList;
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            fileList = this.program.args.slice(1);


                            if (!fileList.length) fileList = DEFAULT_TEST_LOOKUP_DIRS;

                            _context3.next = 4;
                            return this._convertDirsToGlobs(fileList);

                        case 4:
                            fileList = _context3.sent;
                            _context3.next = 7;
                            return (0, _globby2.default)(fileList, {
                                cwd: this.cwd,
                                silent: true,
                                nodir: true
                            });

                        case 7:
                            this.src = _context3.sent;


                            this.src = this.src.map(function (file) {
                                return (0, _path.resolve)(_this4.cwd, file);
                            });

                        case 9:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        function _parseFileList() {
            return _ref3.apply(this, arguments);
        }

        return _parseFileList;
    }();

    CLIArgumentParser.prototype._parseScreenshotsPath = function () {
        var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
            return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            if (!this.opts.screenshots) {
                                _context4.next = 4;
                                break;
                            }

                            this.opts.screenshots = (0, _path.resolve)(this.cwd, this.opts.screenshots);

                            _context4.next = 4;
                            return ensureDir(this.opts.screenshots);

                        case 4:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, this);
        }));

        function _parseScreenshotsPath() {
            return _ref4.apply(this, arguments);
        }

        return _parseScreenshotsPath;
    }();

    CLIArgumentParser.prototype._getProviderName = function _getProviderName() {
        this.opts.providerName = this.opts.listBrowsers === true ? void 0 : this.opts.listBrowsers;
    };

    CLIArgumentParser.prototype.parse = function () {
        var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(argv) {
            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            this.program.parse(argv);

                            this.opts = this.program.opts();

                            // NOTE: the '-list-browsers' option only lists browsers and immediately exits the app.
                            // Therefore, we don't need to process other arguments.

                            if (!this.opts.listBrowsers) {
                                _context5.next = 5;
                                break;
                            }

                            this._getProviderName();
                            return _context5.abrupt('return');

                        case 5:

                            this._parseFilteringOptions();
                            this._parseSelectorTimeout();
                            this._parseAssertionTimeout();
                            this._parseAppInitDelay();
                            this._parseSpeed();
                            this._parsePorts();
                            this._parseBrowserList();

                            _context5.next = 14;
                            return _pinkie2.default.all([this._parseScreenshotsPath(), this._parseFileList()]);

                        case 14:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        function parse(_x3) {
            return _ref5.apply(this, arguments);
        }

        return parse;
    }();

    return CLIArgumentParser;
}();

exports.default = CLIArgumentParser;
module.exports = exports['default'];