'use strict';

exports.__esModule = true;

var _instruction = require('../instruction');

var _instruction2 = _interopRequireDefault(_instruction);

var _nodeBuilder = require('../node-builder');

var _esotope = require('../tools/esotope');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Transform:
// var foo = eval; foo = eval; { _eval: eval }; return eval;
// -->
// var foo = _get$Eval(eval); foo = _get$Eval(eval); { _eval: _get$Eval(eval) }; return _get$Eval(eval);

exports.default = {
    nodeReplacementRequireTransform: false,

    nodeTypes: [_esotope.Syntax.Identifier],

    condition: function condition(node, parent) {
        if (node.name === 'eval') {
            // Skip: eval()
            if (parent.type === _esotope.Syntax.CallExpression && parent.callee === node) return false;

            // Skip: window.eval, eval.call
            if (parent.type === _esotope.Syntax.MemberExpression) return false;

            // Skip: function (eval) { ... } || function func(eval) { ... }
            if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration) && parent.params.indexOf(node) !== -1) return false;

            // Skip: { eval: value }
            if (parent.type === _esotope.Syntax.Property && parent.key === node) return false;

            // Skip: eval = value
            if (parent.type === _esotope.Syntax.AssignmentExpression && parent.left === node) return false;

            // Skip: var eval = value;
            if (parent.type === _esotope.Syntax.VariableDeclarator && parent.id === node) return false;

            // Skip: eval++ || eval-- || ++eval || --eval
            if (parent.type === _esotope.Syntax.UpdateExpression && parent.operator === '++' || parent.operator === '--') return false;

            // Skip already transformed: __get$Eval(eval)
            if (parent.type === _esotope.Syntax.CallExpression && parent.callee.name === _instruction2.default.getEval) return false;

            return true;
        }

        return false;
    },

    run: _nodeBuilder.createGetEvalMethCall
}; // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

module.exports = exports['default'];