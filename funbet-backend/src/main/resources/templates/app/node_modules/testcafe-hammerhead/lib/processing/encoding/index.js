'use strict';

exports.__esModule = true;
exports.encodeContent = exports.decodeContent = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

// NOTE: IIS has a bug when it sends 'raw deflate' compressed data for the 'Deflate' Accept-Encoding header.
// (see: http://zoompf.com/2012/02/lose-the-wait-http-compression)
var inflateWithFallback = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(data) {
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return inflate(data);

                    case 3:
                        return _context.abrupt('return', _context.sent);

                    case 6:
                        _context.prev = 6;
                        _context.t0 = _context['catch'](0);

                        if (!(_context.t0.code === 'Z_DATA_ERROR')) {
                            _context.next = 12;
                            break;
                        }

                        _context.next = 11;
                        return inflateRaw(data);

                    case 11:
                        return _context.abrupt('return', _context.sent);

                    case 12:
                        throw _context.t0;

                    case 13:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this, [[0, 6]]);
    }));

    return function inflateWithFallback(_x) {
        return _ref.apply(this, arguments);
    };
}();

var decodeContent = exports.decodeContent = function () {
    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(content, encoding, charset) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        if (!(encoding === GZIP_CONTENT_ENCODING)) {
                            _context2.next = 6;
                            break;
                        }

                        _context2.next = 3;
                        return gunzip(content);

                    case 3:
                        content = _context2.sent;
                        _context2.next = 13;
                        break;

                    case 6:
                        if (!(encoding === DEFLATE_CONTENT_ENCODING)) {
                            _context2.next = 12;
                            break;
                        }

                        _context2.next = 9;
                        return inflateWithFallback(content);

                    case 9:
                        content = _context2.sent;
                        _context2.next = 13;
                        break;

                    case 12:
                        if (encoding === BROTLI_CONTENT_ENCODING) content = new Buffer(_brotli2.default.decompress(content));

                    case 13:
                        charset.fromBOM(content);

                        return _context2.abrupt('return', _iconvLite2.default.decode(content, charset.get()));

                    case 15:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, this);
    }));

    return function decodeContent(_x2, _x3, _x4) {
        return _ref2.apply(this, arguments);
    };
}();

var encodeContent = exports.encodeContent = function () {
    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(content, encoding, charset) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        content = _iconvLite2.default.encode(content, charset.get(), { addBOM: charset.isFromBOM() });

                        if (!(encoding === GZIP_CONTENT_ENCODING)) {
                            _context3.next = 3;
                            break;
                        }

                        return _context3.abrupt('return', gzip(content));

                    case 3:
                        if (!(encoding === DEFLATE_CONTENT_ENCODING)) {
                            _context3.next = 5;
                            break;
                        }

                        return _context3.abrupt('return', deflate(content));

                    case 5:
                        if (!(encoding === BROTLI_CONTENT_ENCODING)) {
                            _context3.next = 7;
                            break;
                        }

                        return _context3.abrupt('return', new Buffer(_brotli2.default.compress(content)));

                    case 7:
                        return _context3.abrupt('return', content);

                    case 8:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, this);
    }));

    return function encodeContent(_x5, _x6, _x7) {
        return _ref3.apply(this, arguments);
    };
}();

var _zlib = require('zlib');

var _zlib2 = _interopRequireDefault(_zlib);

var _brotli = require('brotli');

var _brotli2 = _interopRequireDefault(_brotli);

var _iconvLite = require('iconv-lite');

var _iconvLite2 = _interopRequireDefault(_iconvLite);

var _promisify = require('../../utils/promisify');

var _promisify2 = _interopRequireDefault(_promisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var gzip = (0, _promisify2.default)(_zlib2.default.gzip);
var deflate = (0, _promisify2.default)(_zlib2.default.deflate);
var gunzip = (0, _promisify2.default)(_zlib2.default.gunzip);
var inflate = (0, _promisify2.default)(_zlib2.default.inflate);
var inflateRaw = (0, _promisify2.default)(_zlib2.default.inflateRaw);

var GZIP_CONTENT_ENCODING = 'gzip';
var DEFLATE_CONTENT_ENCODING = 'deflate';
var BROTLI_CONTENT_ENCODING = 'br';