'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _internalAttributes = require('../../processing/dom/internal-attributes');

var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

var _className = require('../../shadow-ui/class-name');

var _className2 = _interopRequireDefault(_className);

var _script = require('../script');

var _style = require('../../processing/style');

var _style2 = _interopRequireDefault(_style);

var _url = require('../../utils/url');

var urlUtils = _interopRequireWildcard(_url);

var _namespaces = require('./namespaces');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var CDATA_REG_EX = /^(\s)*\/\/<!\[CDATA\[([\s\S]*)\/\/\]\]>(\s)*$/;
var HTML_COMMENT_POSTFIX_REG_EX = /(\/\/[^\n]*|\n\s*)-->[^\n]*([\n\s]*)?$/;
var HTML_COMMENT_PREFIX_REG_EX = /^(\s)*<!--[^\n]*\n/;
var HTML_COMMENT_SIMPLE_POSTFIX_REG_EX = /-->\s*$/;
var HTML_STRING_REG_EX = /^\s*('|")\s*(<[\s\S]+>)\s*('|")\s*$/;
var JAVASCRIPT_PROTOCOL_REG_EX = /^\s*javascript\s*:/i;
var EXECUTABLE_SCRIPT_TYPES_REG_EX = /^\s*(application\/(x-)?(ecma|java)script|text\/(javascript(1\.[0-5])?|((x-)?ecma|x-java|js|live)script))\s*$/;

var URL_ATTR_TAGS = {
    href: ['a', 'link', 'image', 'area', 'base'],
    src: ['img', 'embed', 'script', 'source', 'video', 'audio', 'input', 'frame', 'iframe'],
    action: ['form'],
    formaction: ['button', 'input'],
    manifest: ['html'],
    data: ['object']
};

var URL_ATTRS = (0, _keys2.default)(URL_ATTR_TAGS);

var SVG_XLINK_HREF_TAGS = ['animate', 'animateColor', 'animateMotion', 'animateTransform', 'mpath', 'set', //animation elements
'linearGradient', 'radialGradient', 'stop', //gradient elements
'a', 'altglyph', 'color-profile', 'cursor', 'feimage', 'filter', '<font-face-uri', 'glyphref', 'image', 'mpath', 'pattern', 'script', 'textpath', 'use', 'tref'];

var TARGET_ATTR_TAGS = ['a', 'form', 'area', 'base'];
var IFRAME_FLAG_TAGS = function () {
    var arr = [];

    for (var _iterator = TARGET_ATTR_TAGS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var tagName = _ref;

        if (tagName !== 'base') arr.push(tagName);
    }

    return arr;
}();

var ELEMENT_PROCESSED = 'hammerhead|element-processed';

var AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER = 'hammerhead|autocomplete-attribute-absence-marker';

var DomProcessor = function () {
    function DomProcessor(adapter) {
        (0, _classCallCheck3.default)(this, DomProcessor);

        this.adapter = adapter;
        this.adapter.attachEventEmitter(this);

        this.HTML_STRING_REG_EX = HTML_STRING_REG_EX;
        this.JAVASCRIPT_PROTOCOL_REG_EX = JAVASCRIPT_PROTOCOL_REG_EX;
        this.URL_ATTRS = URL_ATTRS;
        this.SVG_XLINK_HREF_TAGS = SVG_XLINK_HREF_TAGS;
        this.AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER = AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER;

        this.HTML_PROCESSING_REQUIRED_EVENT = 'hammerhead|event|html-processing-required';

        this.EVENTS = this.adapter.EVENTS;

        this.elementProcessorPatterns = this._createProcessorPatterns(this.adapter);
    }

    DomProcessor.isTagWithTargetAttr = function isTagWithTargetAttr(tagName) {
        return TARGET_ATTR_TAGS.indexOf(tagName) !== -1;
    };

    DomProcessor.isIframeFlagTag = function isIframeFlagTag(tagName) {
        return tagName && IFRAME_FLAG_TAGS.indexOf(tagName) !== -1;
    };

    DomProcessor.isAddedAutocompleteAttr = function isAddedAutocompleteAttr(attrName, storedAttrValue) {
        return attrName === 'autocomplete' && storedAttrValue === AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER;
    };

    DomProcessor.prototype._createProcessorPatterns = function _createProcessorPatterns(adapter) {
        var _this = this;

        var selectors = {
            HAS_HREF_ATTR: function HAS_HREF_ATTR(el) {
                return _this.isUrlAttr(el, 'href');
            },

            HAS_SRC_ATTR: function HAS_SRC_ATTR(el) {
                return _this.isUrlAttr(el, 'src');
            },

            HAS_ACTION_ATTR: function HAS_ACTION_ATTR(el) {
                return _this.isUrlAttr(el, 'action');
            },

            HAS_FORMACTION_ATTR: function HAS_FORMACTION_ATTR(el) {
                return _this.isUrlAttr(el, 'formaction');
            },

            HAS_MANIFEST_ATTR: function HAS_MANIFEST_ATTR(el) {
                return _this.isUrlAttr(el, 'manifest');
            },

            HAS_DATA_ATTR: function HAS_DATA_ATTR(el) {
                return _this.isUrlAttr(el, 'data');
            },

            HTTP_EQUIV_META: function HTTP_EQUIV_META(el) {
                var tagName = adapter.getTagName(el);

                return tagName === 'meta' && adapter.hasAttr(el, 'http-equiv');
            },

            ALL: function ALL() {
                return true;
            },

            IS_SCRIPT: function IS_SCRIPT(el) {
                return adapter.getTagName(el) === 'script';
            },

            IS_LINK: function IS_LINK(el) {
                return adapter.getTagName(el) === 'link';
            },

            IS_INPUT: function IS_INPUT(el) {
                return adapter.getTagName(el) === 'input';
            },

            IS_STYLE: function IS_STYLE(el) {
                return adapter.getTagName(el) === 'style';
            },

            HAS_EVENT_HANDLER: function HAS_EVENT_HANDLER(el) {
                return adapter.hasEventHandler(el);
            },

            IS_SANDBOXED_IFRAME: function IS_SANDBOXED_IFRAME(el) {
                return adapter.getTagName(el) === 'iframe' && adapter.hasAttr(el, 'sandbox');
            },

            IS_SVG_ELEMENT_WITH_XLINK_HREF_ATTR: function IS_SVG_ELEMENT_WITH_XLINK_HREF_ATTR(el) {
                return adapter.isSVGElement(el) && adapter.hasAttr(el, 'xlink:href') && SVG_XLINK_HREF_TAGS.indexOf(adapter.getTagName(el)) !== -1;
            },

            IS_SVG_ELEMENT_WITH_XML_BASE_ATTR: function IS_SVG_ELEMENT_WITH_XML_BASE_ATTR(el) {
                return adapter.isSVGElement(el) && adapter.hasAttr(el, 'xml:base');
            }
        };

        return [{
            selector: selectors.HAS_HREF_ATTR,
            urlAttr: 'href',
            elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
        }, {
            selector: selectors.HAS_SRC_ATTR,
            urlAttr: 'src',
            elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
        }, {
            selector: selectors.HAS_ACTION_ATTR,
            urlAttr: 'action',
            elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
        }, {
            selector: selectors.HAS_FORMACTION_ATTR,
            urlAttr: 'formaction',
            elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
        }, {
            selector: selectors.HAS_MANIFEST_ATTR,
            urlAttr: 'manifest',
            elementProcessors: [this._processUrlAttrs, this._processUrlJsAttr]
        }, {
            selector: selectors.HAS_DATA_ATTR,
            urlAttr: 'data',
            elementProcessors: [this._processUrlAttrs, this._processUrlJsAttr]
        }, {
            selector: selectors.HTTP_EQUIV_META,
            urlAttr: 'content',
            elementProcessors: [this._processMetaElement]
        }, {
            selector: selectors.IS_SCRIPT,
            elementProcessors: [this._processScriptElement, this._processIntegrityAttr]
        }, { selector: selectors.ALL, elementProcessors: [this._processStyleAttr] }, { selector: selectors.IS_LINK, elementProcessors: [this._processIntegrityAttr] }, { selector: selectors.IS_STYLE, elementProcessors: [this._processStylesheetElement] }, { selector: selectors.IS_INPUT, elementProcessors: [this._processAutoComplete] }, { selector: selectors.HAS_EVENT_HANDLER, elementProcessors: [this._processEvtAttr] }, { selector: selectors.IS_SANDBOXED_IFRAME, elementProcessors: [this._processSandboxedIframe] }, {
            selector: selectors.IS_SVG_ELEMENT_WITH_XLINK_HREF_ATTR,
            urlAttr: 'xlink:href',
            elementProcessors: [this._processSVGXLinkHrefAttr, this._processUrlAttrs]
        }, {
            selector: selectors.IS_SVG_ELEMENT_WITH_XML_BASE_ATTR,
            urlAttr: 'xml:base',
            elementProcessors: [this._processUrlAttrs]
        }];
    };

    // API


    DomProcessor.prototype.processElement = function processElement(el, urlReplacer) {
        if (el[ELEMENT_PROCESSED]) return;

        // NOTE: The 'script' element is not executed at the moment it is created. The execution occurs after the
        // element is appended to a document. But in IE9, if you read a script's 'document', 'children' or 'all'
        // property, the script is executed immediately (even if this happens before the script is appended to a
        // document). The JQuery element's 'is' function reads the 'document' property and the script is executed
        // too early. Therefore, we should test a clone of the element instead of the element itself. (B237231)
        var elementForSelectorCheck = this.adapter.getElementForSelectorCheck(el);

        for (var i = 0; i < this.elementProcessorPatterns.length; i++) {
            var pattern = this.elementProcessorPatterns[i];

            if (pattern.selector(elementForSelectorCheck) && !this._isShadowElement(el)) {
                for (var j = 0; j < pattern.elementProcessors.length; j++) {
                    pattern.elementProcessors[j].call(this, el, urlReplacer, pattern);
                }el[ELEMENT_PROCESSED] = true;
            }
        }
    };

    // Utils


    DomProcessor.prototype.getElementResourceType = function getElementResourceType(el) {
        var tagName = this.adapter.getTagName(el);

        return urlUtils.getResourceTypeString({
            isIframe: tagName === 'iframe' || this._isOpenLinkInIframe(el),
            isForm: tagName === 'form' || tagName === 'input' || tagName === 'button',
            isScript: tagName === 'script'
        });
    };

    DomProcessor.prototype.getStoredAttrName = function getStoredAttrName(attr) {
        return attr + _internalAttributes2.default.storedAttrPostfix;
    };

    DomProcessor.prototype.isUrlAttr = function isUrlAttr(el, attr, ns) {
        var tagName = this.adapter.getTagName(el);

        attr = attr ? attr.toLowerCase() : attr;

        if (URL_ATTR_TAGS[attr] && URL_ATTR_TAGS[attr].indexOf(tagName) !== -1) return true;

        return this.adapter.isSVGElement(el) && (attr === 'xml:base' || attr === 'base' && ns === _namespaces.XML_NAMESPACE);
    };

    DomProcessor.prototype.getUrlAttr = function getUrlAttr(el) {
        var tagName = this.adapter.getTagName(el);

        for (var _iterator2 = URL_ATTRS, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var urlAttr = _ref2;

            if (URL_ATTR_TAGS[urlAttr].indexOf(tagName) !== -1) return urlAttr;
        }

        return null;
    };

    DomProcessor.prototype._isOpenLinkInIframe = function _isOpenLinkInIframe(el) {
        var tagName = this.adapter.getTagName(el);
        var target = this.adapter.getAttr(el, 'target');

        if (target !== '_top') {
            var mustProcessTag = DomProcessor.isIframeFlagTag(tagName);
            var isNameTarget = target ? target[0] !== '_' : false;

            if (target === '_parent') return mustProcessTag && !this.adapter.isTopParentIframe(el);

            if (mustProcessTag && (this.adapter.hasIframeParent(el) || isNameTarget)) return true;
        }

        return false;
    };

    DomProcessor.prototype._isShadowElement = function _isShadowElement(el) {
        var className = this.adapter.getClassName(el);

        return typeof className === 'string' && className.indexOf(_className2.default.postfix) > -1;
    };

    // Element processors


    DomProcessor.prototype._processAutoComplete = function _processAutoComplete(el) {
        var storedUrlAttr = this.getStoredAttrName('autocomplete');
        var processed = this.adapter.hasAttr(el, storedUrlAttr);
        var attrValue = this.adapter.getAttr(el, processed ? storedUrlAttr : 'autocomplete');

        if (!processed) {
            this.adapter.setAttr(el, storedUrlAttr, attrValue || attrValue === '' ? attrValue : AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER);
        }

        this.adapter.setAttr(el, 'autocomplete', 'off');
    };

    // NOTE: We simply remove the 'integrity' attribute because its value will not be relevant after the script
    // content changes (http://www.w3.org/TR/SRI/). If this causes problems in the future, we will need to generate
    // the correct SHA for the changed script. (GH-235)


    DomProcessor.prototype._processIntegrityAttr = function _processIntegrityAttr(el) {
        this.adapter.removeAttr(el, 'integrity');
    };

    DomProcessor.prototype._processJsAttr = function _processJsAttr(el, attr, jsProtocol) {
        var storedUrlAttr = this.getStoredAttrName(attr);
        var processed = this.adapter.hasAttr(el, storedUrlAttr);
        var attrValue = this.adapter.getAttr(el, processed ? storedUrlAttr : attr);

        var code = jsProtocol ? attrValue.replace(JAVASCRIPT_PROTOCOL_REG_EX, '') : attrValue;
        var matches = code.match(HTML_STRING_REG_EX);

        var domProc = this;

        var setAttributes = function setAttributes(value, processedValue, processedAttrValue) {
            if (value !== processedValue) {
                if (!processed) domProc.adapter.setAttr(el, storedUrlAttr, attrValue);

                domProc.adapter.setAttr(el, attr, processedAttrValue);
            }
        };

        if (matches && jsProtocol) {
            var html = matches[2];

            this.emit(this.HTML_PROCESSING_REQUIRED_EVENT, html, function (processedHTML) {
                /*eslint-disable no-script-url*/
                var processedAttrValue = 'javascript:\'' + processedHTML.replace(/'/g, "\\'") + '\'';

                /*eslint-enable no-script-url*/
                setAttributes(html, processedHTML, processedAttrValue);
            });
        } else {
            var processedCode = (0, _script.processScript)(code, false);
            var processedAttrValue = processedCode;

            /*eslint-disable no-script-url*/
            if (jsProtocol) processedAttrValue = 'javascript:' + processedAttrValue;
            /*eslint-enable no-script-url*/

            setAttributes(code, processedCode, processedAttrValue);
        }
    };

    DomProcessor.prototype._processEvtAttr = function _processEvtAttr(el) {
        var events = this.adapter.EVENTS;

        for (var i = 0; i < events.length; i++) {
            var attrValue = this.adapter.getAttr(el, events[i]);

            if (attrValue) this._processJsAttr(el, events[i], JAVASCRIPT_PROTOCOL_REG_EX.test(attrValue));
        }
    };

    DomProcessor.prototype._processMetaElement = function _processMetaElement(el, urlReplacer, pattern) {
        var httpEquivAttrValue = this.adapter.getAttr(el, 'http-equiv').toLowerCase();

        if (httpEquivAttrValue === 'refresh') {
            var attr = this.adapter.getAttr(el, pattern.urlAttr);

            attr = attr.replace(/(url=)(.*)$/i, function (match, prefix, url) {
                return prefix + urlReplacer(url);
            });

            this.adapter.setAttr(el, pattern.urlAttr, attr);
        }
        // TODO: remove after https://github.com/DevExpress/testcafe-hammerhead/issues/244 implementation
        else if (httpEquivAttrValue === 'content-security-policy') {
                this.adapter.removeAttr(el, 'http-equiv');
                this.adapter.removeAttr(el, 'content');
            }
    };

    DomProcessor.prototype._processSandboxedIframe = function _processSandboxedIframe(el) {
        var attrValue = this.adapter.getAttr(el, 'sandbox');
        var allowSameOrigin = attrValue.indexOf('allow-same-origin') !== -1;
        var allowScripts = attrValue.indexOf('allow-scripts') !== -1;
        var storedAttr = this.getStoredAttrName('sandbox');

        this.adapter.setAttr(el, storedAttr, attrValue);

        if (!allowSameOrigin || !allowScripts) {
            attrValue += !allowSameOrigin ? ' allow-same-origin' : '';
            attrValue += !allowScripts ? ' allow-scripts' : '';
        }

        this.adapter.setAttr(el, 'sandbox', attrValue);
    };

    DomProcessor.prototype._processScriptElement = function _processScriptElement(script) {
        var scriptContent = this.adapter.getScriptContent(script);

        if (!scriptContent) return;

        var scriptProcessedOnServer = (0, _script.isScriptProcessed)(scriptContent);

        if (scriptProcessedOnServer) return;

        // NOTE: We do not process scripts that are not executed during page load. We process scripts of types like
        // text/javascript, application/javascript etc. (a complete list of MIME types is specified in the w3c.org
        // html5 specification). If the type is not set, it is considered 'text/javascript' by default.
        var scriptType = this.adapter.getAttr(script, 'type');
        var isExecutableScript = !scriptType || EXECUTABLE_SCRIPT_TYPES_REG_EX.test(scriptType);

        if (isExecutableScript) {
            var result = scriptContent;
            var commentPrefix = '';
            var commentPrefixMatch = result.match(HTML_COMMENT_PREFIX_REG_EX);
            var commentPostfix = '';
            var commentPostfixMatch = null;
            var hasCDATA = CDATA_REG_EX.test(result);

            if (commentPrefixMatch) {
                commentPrefix = commentPrefixMatch[0];
                commentPostfixMatch = result.match(HTML_COMMENT_POSTFIX_REG_EX);

                if (commentPostfixMatch) commentPostfix = commentPostfixMatch[0];else if (!HTML_COMMENT_SIMPLE_POSTFIX_REG_EX.test(commentPrefix)) commentPostfix = '//-->';

                result = result.replace(commentPrefix, '').replace(commentPostfix, '');
            }

            if (hasCDATA) result = result.replace(CDATA_REG_EX, '$2');

            result = commentPrefix + (0, _script.processScript)(result, true) + commentPostfix;

            if (hasCDATA) result = '\n//<![CDATA[\n' + result + '//]]>';

            this.adapter.setScriptContent(script, result);
        }
    };

    DomProcessor.prototype._processStyleAttr = function _processStyleAttr(el, urlReplacer) {
        var style = this.adapter.getAttr(el, 'style');

        if (style) this.adapter.setAttr(el, 'style', _style2.default.process(style, urlReplacer));
    };

    DomProcessor.prototype._processStylesheetElement = function _processStylesheetElement(el, urlReplacer) {
        var content = this.adapter.getStyleContent(el);

        if (content && urlReplacer) {
            content = _style2.default.process(content, urlReplacer, true);

            this.adapter.setStyleContent(el, content);
        }
    };

    DomProcessor.prototype._processTargetBlank = function _processTargetBlank(el) {
        var storedTargetAttr = this.getStoredAttrName('target');
        var processed = this.adapter.hasAttr(el, storedTargetAttr);

        if (!processed) {
            var attrValue = this.adapter.getAttr(el, 'target');

            // NOTE: Value may have whitespace.
            attrValue = attrValue && attrValue.replace(/\s/g, '');

            if (attrValue === '_blank' || attrValue === 'blank') {
                this.adapter.setAttr(el, 'target', '_top');
                this.adapter.setAttr(el, storedTargetAttr, attrValue);
            }
        }
    };

    DomProcessor.prototype._processUrlAttrs = function _processUrlAttrs(el, urlReplacer, pattern) {
        if (urlReplacer && pattern.urlAttr) {
            var storedUrlAttr = this.getStoredAttrName(pattern.urlAttr);
            var resourceUrl = this.adapter.getAttr(el, pattern.urlAttr);
            var isSpecialPage = urlUtils.isSpecialPage(resourceUrl);
            var processedOnServer = this.adapter.hasAttr(el, storedUrlAttr);

            // NOTE: Page resource URL with proxy URL.
            if ((resourceUrl || resourceUrl === '') && !processedOnServer) {
                if (urlUtils.isSupportedProtocol(resourceUrl) || isSpecialPage) {
                    var elTagName = this.adapter.getTagName(el);
                    var isIframe = elTagName === 'iframe';
                    var isScript = elTagName === 'script';
                    var isAnchor = elTagName === 'a';
                    var target = this.adapter.getAttr(el, 'target');

                    // NOTE: Elements with target=_parent shouldn’t be processed on the server,because we don't
                    // know what is the parent of the processed page (an iframe or the top window).
                    if (!this.adapter.needToProcessUrl(elTagName, target)) return;

                    var resourceType = this.getElementResourceType(el);
                    var parsedResourceUrl = urlUtils.parseUrl(resourceUrl);
                    var isRelativePath = !parsedResourceUrl.host;
                    var proxyUrl = '';
                    var charsetAttrValue = isScript && this.adapter.getAttr(el, 'charset');

                    // NOTE: Only a non-relative iframe src can be cross-domain.
                    if (isIframe && !isSpecialPage && !isRelativePath) {
                        var location = urlReplacer('/');
                        var proxyUrlObj = urlUtils.parseProxyUrl(location);
                        var destUrl = proxyUrlObj.destUrl;

                        if (!parsedResourceUrl.protocol) resourceUrl = proxyUrlObj.destResourceInfo.protocol + resourceUrl;

                        // NOTE: Cross-domain iframe.
                        if (!this.adapter.sameOriginCheck(destUrl, resourceUrl)) {
                            var proxyHostname = urlUtils.parseUrl(location).hostname;
                            var proxyPort = this.adapter.getCrossDomainPort();
                            var iframeResourceType = urlUtils.getResourceTypeString({ isIframe: true });

                            proxyUrl = resourceUrl ? this.adapter.getProxyUrl(resourceUrl, {
                                proxyHostname: proxyHostname,
                                proxyPort: proxyPort,

                                sessionId: proxyUrlObj.sessionId,
                                resourceType: iframeResourceType
                            }) : '';
                        }
                    }

                    if (isSpecialPage && !isAnchor) proxyUrl = resourceUrl;

                    proxyUrl = proxyUrl === '' && resourceUrl ? urlReplacer(resourceUrl, resourceType, charsetAttrValue) : proxyUrl;

                    this.adapter.setAttr(el, storedUrlAttr, resourceUrl);

                    if (elTagName === 'img' && proxyUrl !== '' && !isSpecialPage) this.adapter.setAttr(el, pattern.urlAttr, urlUtils.resolveUrlAsDest(resourceUrl, urlReplacer));else this.adapter.setAttr(el, pattern.urlAttr, proxyUrl);
                }
            }
        }
    };

    DomProcessor.prototype._processUrlJsAttr = function _processUrlJsAttr(el, urlReplacer, pattern) {
        if (JAVASCRIPT_PROTOCOL_REG_EX.test(this.adapter.getAttr(el, pattern.urlAttr))) this._processJsAttr(el, pattern.urlAttr, true);
    };

    DomProcessor.prototype._processSVGXLinkHrefAttr = function _processSVGXLinkHrefAttr(el, urlReplacer, pattern) {
        var attrValue = this.adapter.getAttr(el, pattern.urlAttr);

        if (urlUtils.HASH_RE.test(attrValue)) {
            var storedUrlAttr = this.getStoredAttrName(pattern.urlAttr);

            this.adapter.setAttr(el, storedUrlAttr, attrValue);
        }
    };

    return DomProcessor;
}();

exports.default = DomProcessor;
module.exports = exports['default'];