'use strict';

exports.__esModule = true;
exports.createStringLiteral = createStringLiteral;
exports.createTempVarIdentifier = createTempVarIdentifier;
exports.createAssignmentExprStmt = createAssignmentExprStmt;
exports.createVarDeclaration = createVarDeclaration;
exports.createProcessScriptMethCall = createProcessScriptMethCall;
exports.createGetStorageMethCall = createGetStorageMethCall;
exports.createLocationGetWrapper = createLocationGetWrapper;
exports.createLocationSetWrapper = createLocationSetWrapper;
exports.createPropertySetWrapper = createPropertySetWrapper;
exports.createMethCallWrapper = createMethCallWrapper;
exports.createPropertyGetWrapper = createPropertyGetWrapper;
exports.createComputedPropertyGetWrapper = createComputedPropertyGetWrapper;
exports.createComputedPropertySetWrapper = createComputedPropertySetWrapper;
exports.createGetEvalMethCall = createGetEvalMethCall;
exports.createGetPostMessageMethCall = createGetPostMessageMethCall;
exports.createExpandedConcatOperation = createExpandedConcatOperation;

var _esotope = require('./tools/esotope');

var _internalLiteral = require('./internal-literal');

var _internalLiteral2 = _interopRequireDefault(_internalLiteral);

var _instruction = require('./instruction');

var _instruction2 = _interopRequireDefault(_instruction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createStringLiteral(value) {
    return {
        type: _esotope.Syntax.Literal,
        value: value,
        raw: '"' + value + '"'
    };
} // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

function createTempVarIdentifier() {
    return {
        type: _esotope.Syntax.Identifier,
        name: _internalLiteral2.default.tempVar
    };
}

function createAssignmentExprStmt(left, right) {
    return {
        type: _esotope.Syntax.ExpressionStatement,

        expression: {
            type: _esotope.Syntax.AssignmentExpression,
            operator: '=',
            left: left,
            right: right
        }
    };
}

function createVarDeclaration(identifier) {
    return {
        type: _esotope.Syntax.VariableDeclaration,

        declarations: [{
            type: _esotope.Syntax.VariableDeclarator,
            id: identifier,
            init: null
        }],

        kind: 'var'
    };
}

function createProcessScriptMethCall(arg, isApply) {
    var ast = {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.processScript
        },

        arguments: [arg]
    };

    if (isApply) {
        ast.arguments.push({
            type: _esotope.Syntax.Literal,
            value: true,
            raw: 'true'
        });
    }

    return ast;
}

function createGetStorageMethCall(storage) {
    return {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.getStorage
        },

        arguments: [{
            type: _esotope.Syntax.Identifier,
            name: storage
        }]
    };
}

function createLocationGetWrapper() {
    return {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.getLocation
        },

        arguments: [{
            type: _esotope.Syntax.Identifier,
            name: 'location'
        }]
    };
}

function createLocationSetWrapper(value, wrapWithSequence) {
    var wrapper = {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.MemberExpression,
            computed: false,

            object: {
                type: _esotope.Syntax.FunctionExpression,
                id: null,
                params: [],
                defaults: [],

                body: {
                    type: _esotope.Syntax.BlockStatement,
                    body: [{
                        type: _esotope.Syntax.ReturnStatement,

                        argument: {
                            type: _esotope.Syntax.LogicalExpression,
                            operator: '||',

                            left: {
                                type: _esotope.Syntax.CallExpression,

                                callee: {
                                    type: _esotope.Syntax.Identifier,
                                    name: _instruction2.default.setLocation
                                },

                                arguments: [{
                                    type: _esotope.Syntax.Identifier,
                                    name: 'location'
                                }, value]
                            },

                            right: {
                                type: _esotope.Syntax.AssignmentExpression,
                                operator: '=',

                                left: {
                                    type: _esotope.Syntax.Identifier,
                                    name: 'location'
                                },

                                right: value
                            }
                        }
                    }]
                },

                rest: null,
                generator: false,
                expression: false
            },

            property: {
                type: _esotope.Syntax.Identifier,
                name: 'call'
            }
        },

        arguments: [{
            type: _esotope.Syntax.ThisExpression
        }]
    };

    if (wrapWithSequence) {
        wrapper = {
            type: _esotope.Syntax.SequenceExpression,

            expressions: [{
                type: 'Literal',
                value: 0,
                raw: '0'
            }, wrapper]
        };
    }

    return wrapper;
}

function createPropertySetWrapper(propertyName, obj, value) {
    return {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.setProperty
        },

        arguments: [obj, createStringLiteral(propertyName), value]
    };
}

function createMethCallWrapper(owner, meth, args) {
    return {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.callMethod
        },

        arguments: [owner, meth, {
            type: _esotope.Syntax.ArrayExpression,
            elements: args
        }]
    };
}

function createPropertyGetWrapper(propertyName, owner) {
    return {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.getProperty
        },

        arguments: [owner, createStringLiteral(propertyName)]
    };
}

function createComputedPropertyGetWrapper(property, owner) {
    return {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.getProperty
        },

        arguments: [owner, property]
    };
}

function createComputedPropertySetWrapper(property, owner, value) {
    return {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.setProperty
        },

        arguments: [owner, property, value]
    };
}

function createGetEvalMethCall(node) {
    return {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.getEval
        },

        arguments: [node]
    };
}

function createGetPostMessageMethCall(node) {
    var parentObject = node.object;

    return {
        type: _esotope.Syntax.CallExpression,

        callee: {
            type: _esotope.Syntax.Identifier,
            name: _instruction2.default.getPostMessage
        },

        arguments: parentObject ? [parentObject] : [{
            type: _esotope.Syntax.Literal,
            value: null
        }, node]
    };
}

function createExpandedConcatOperation(left, right) {
    return {
        type: _esotope.Syntax.AssignmentExpression,
        operator: '=',
        left: left,

        right: {
            type: _esotope.Syntax.BinaryExpression,
            operator: '+',
            left: left,
            right: right
        }
    };
}