'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _promisify = require('../utils/promisify');

var _promisify2 = _interopRequireDefault(_promisify);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var readFile = (0, _promisify2.default)(_fs2.default.readFile);
var stat = (0, _promisify2.default)(_fs2.default.stat);
var writeFile = (0, _promisify2.default)(_fs2.default.writeFile);

var UploadStorage = function () {
    function UploadStorage(uploadsRoot) {
        (0, _classCallCheck3.default)(this, UploadStorage);

        this.uploadsRoot = uploadsRoot;
    }

    UploadStorage._loadFile = function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(filePath) {
            var fileContent, stats;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return readFile(filePath);

                        case 2:
                            fileContent = _context.sent;
                            _context.next = 5;
                            return stat(filePath);

                        case 5:
                            stats = _context.sent;
                            return _context.abrupt('return', {
                                data: fileContent.toString('base64'),
                                info: {
                                    lastModifiedDate: stats.mtime,
                                    name: _path2.default.basename(filePath),
                                    type: _mime2.default.lookup(filePath)
                                }
                            });

                        case 7:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function _loadFile(_x) {
            return _ref.apply(this, arguments);
        }

        return _loadFile;
    }();

    UploadStorage.prototype._runFileProcessingTask = function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(fileName, processor) {
            var resolvedPath;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            resolvedPath = _path2.default.resolve(this.uploadsRoot, fileName);
                            _context2.prev = 1;
                            _context2.next = 4;
                            return processor(resolvedPath, fileName);

                        case 4:
                            return _context2.abrupt('return', _context2.sent);

                        case 7:
                            _context2.prev = 7;
                            _context2.t0 = _context2['catch'](1);
                            return _context2.abrupt('return', {
                                err: _context2.t0.toString(),
                                path: resolvedPath
                            });

                        case 10:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this, [[1, 7]]);
        }));

        function _runFileProcessingTask(_x2, _x3) {
            return _ref2.apply(this, arguments);
        }

        return _runFileProcessingTask;
    }();

    UploadStorage.prototype._processFiles = function () {
        var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(fileNames, processor) {
            var _this = this;

            var processTasks, result;
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            processTasks = fileNames.map(function (fileName) {
                                return _this._runFileProcessingTask(fileName, processor);
                            });
                            _context3.next = 3;
                            return _pinkie2.default.all(processTasks);

                        case 3:
                            result = _context3.sent;


                            result = result.filter(function (value) {
                                return !!value;
                            });

                            return _context3.abrupt('return', result.length ? result : null);

                        case 6:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        function _processFiles(_x4, _x5) {
            return _ref3.apply(this, arguments);
        }

        return _processFiles;
    }();

    UploadStorage.prototype.store = function () {
        var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(fileNames, data) {
            var _this2 = this;

            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            _context5.next = 2;
                            return this._processFiles(fileNames, function () {
                                var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(resolvedPath, fileName) {
                                    var content;
                                    return _regenerator2.default.wrap(function _callee4$(_context4) {
                                        while (1) {
                                            switch (_context4.prev = _context4.next) {
                                                case 0:
                                                    content = new Buffer(data[fileNames.indexOf(fileName)], 'base64');
                                                    _context4.next = 3;
                                                    return writeFile(resolvedPath, content);

                                                case 3:
                                                case 'end':
                                                    return _context4.stop();
                                            }
                                        }
                                    }, _callee4, _this2);
                                }));

                                return function (_x8, _x9) {
                                    return _ref5.apply(this, arguments);
                                };
                            }());

                        case 2:
                            return _context5.abrupt('return', _context5.sent);

                        case 3:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        function store(_x6, _x7) {
            return _ref4.apply(this, arguments);
        }

        return store;
    }();

    UploadStorage.prototype.get = function () {
        var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(paths) {
            var _this3 = this;

            return _regenerator2.default.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            _context7.next = 2;
                            return this._processFiles(paths, function () {
                                var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(resolvedPath) {
                                    return _regenerator2.default.wrap(function _callee6$(_context6) {
                                        while (1) {
                                            switch (_context6.prev = _context6.next) {
                                                case 0:
                                                    _context6.next = 2;
                                                    return UploadStorage._loadFile(resolvedPath);

                                                case 2:
                                                    return _context6.abrupt('return', _context6.sent);

                                                case 3:
                                                case 'end':
                                                    return _context6.stop();
                                            }
                                        }
                                    }, _callee6, _this3);
                                }));

                                return function (_x11) {
                                    return _ref7.apply(this, arguments);
                                };
                            }());

                        case 2:
                            return _context7.abrupt('return', _context7.sent);

                        case 3:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, this);
        }));

        function get(_x10) {
            return _ref6.apply(this, arguments);
        }

        return get;
    }();

    return UploadStorage;
}();

exports.default = UploadStorage;
module.exports = exports['default'];