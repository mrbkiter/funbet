'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _headers = require('./xhr/headers');

var _headers2 = _interopRequireDefault(_headers);

var _charset = require('../processing/encoding/charset');

var _charset2 = _interopRequireDefault(_charset);

var _url = require('../utils/url');

var urlUtils = _interopRequireWildcard(_url);

var _contentType = require('../utils/content-type');

var contentTypeUtils = _interopRequireWildcard(_contentType);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REDIRECT_STATUS_CODES = [301, 302, 303, 307];
var HTTP_DEFAUL_PORT = '80';
var HTTPS_DEFAUL_PORT = '443';

var RequestPipelineContext = function () {
    function RequestPipelineContext(req, res, serverInfo) {
        (0, _classCallCheck3.default)(this, RequestPipelineContext);

        this.serverInfo = serverInfo;
        this.session = null;

        this.req = req;
        this.reqBody = null;
        this.res = res;

        this.dest = null;
        this.destRes = null;
        this.destResBody = null;
        this.hasDestReqErr = false;

        this.isXhr = false;
        this.isFetch = false;
        this.isPage = false;
        this.isIframe = false;
        this.isSpecialPage = false;
        this.contentInfo = null;

        var acceptHeader = req.headers['accept'];

        this.isXhr = !!req.headers[_headers2.default.requestMarker];
        this.isFetch = !!req.headers[_headers2.default.fetchRequestCredentials];
        this.isPage = !this.isXhr && !this.isFetch && acceptHeader && contentTypeUtils.isPage(acceptHeader);
    }

    // TODO: Rewrite parseProxyUrl instead.


    RequestPipelineContext.prototype._flattenParsedProxyUrl = function _flattenParsedProxyUrl(parsed) {
        if (parsed) {
            var parsedResourceType = urlUtils.parseResourceType(parsed.resourceType);

            var dest = {
                url: parsed.destUrl,
                protocol: parsed.destResourceInfo.protocol,
                host: parsed.destResourceInfo.host,
                hostname: parsed.destResourceInfo.hostname,
                port: parsed.destResourceInfo.port,
                partAfterHost: parsed.destResourceInfo.partAfterHost,
                isIframe: parsedResourceType.isIframe,
                isForm: parsedResourceType.isForm,
                isScript: parsedResourceType.isScript,
                charset: parsed.charset
            };

            dest = this._omitDefaultPort(dest);

            return {
                dest: dest,
                sessionId: parsed.sessionId
            };
        }

        return null;
    };

    RequestPipelineContext.prototype._omitDefaultPort = function _omitDefaultPort(dest) {
        // NOTE: Browsers may send the default port in the 'referer' header. But since we compose the destination
        // URL from it, we need to skip the port number if it's the protocol's default port. Some servers have
        // host conditions that do not include a port number.
        var hasDefaultPort = dest.protocol === 'https:' && dest.port === HTTPS_DEFAUL_PORT || dest.protocol === 'http:' && dest.port === HTTP_DEFAUL_PORT;

        if (hasDefaultPort) {
            dest.host = dest.host.split(':')[0];
            dest.port = '';
        }

        return dest;
    };

    RequestPipelineContext.prototype._getDestFromReferer = function _getDestFromReferer(parsedReferer) {
        var dest = parsedReferer.dest;

        dest.partAfterHost = this.req.url;
        dest.url = urlUtils.formatUrl(dest);

        return {
            dest: dest,
            sessionId: parsedReferer.sessionId
        };
    };

    RequestPipelineContext.prototype._isFileDownload = function _isFileDownload() {
        var contentDisposition = this.destRes.headers['content-disposition'];

        return contentDisposition && contentDisposition.indexOf('attachment') > -1 && contentDisposition.indexOf('filename') > -1;
    };

    RequestPipelineContext.prototype._getInjectable = function _getInjectable(injectable) {
        var _this = this;

        return injectable.map(function (url) {
            return _this.serverInfo.domain + url;
        });
    };

    RequestPipelineContext.prototype._initRequestNatureInfo = function _initRequestNatureInfo() {
        var acceptHeader = this.req.headers['accept'];

        this.isXhr = !!this.req.headers[_headers2.default.requestMarker];
        this.isPage = !this.isXhr && acceptHeader && contentTypeUtils.isPage(acceptHeader);
        this.isIframe = this.dest.isIframe;
        this.isSpecialPage = urlUtils.isSpecialPage(this.dest.url);
    };

    // API


    RequestPipelineContext.prototype.dispatch = function dispatch(openSessions) {
        var parsedReqUrl = urlUtils.parseProxyUrl(this.req.url);
        var referer = this.req.headers['referer'];
        var parsedReferer = referer && urlUtils.parseProxyUrl(referer);

        // TODO: Remove it after parseProxyURL is rewritten.
        parsedReqUrl = this._flattenParsedProxyUrl(parsedReqUrl);
        parsedReferer = this._flattenParsedProxyUrl(parsedReferer);

        // NOTE: Try to extract the destination from the 'referer' header.
        if (!parsedReqUrl && parsedReferer) parsedReqUrl = this._getDestFromReferer(parsedReferer);

        if (parsedReqUrl) {
            this.session = openSessions[parsedReqUrl.sessionId];

            if (!this.session) return false;

            this.dest = parsedReqUrl.dest;

            // Browsers add a leading slash to the pathname part of url (GH-608)
            // For example: url http://www.example.com?gd=GID12082014 will be converted
            // to http://www.example.com/?gd=GID12082014
            this.dest.partAfterHost = this.dest.partAfterHost[0] === '/' ? this.dest.partAfterHost : '/' + this.dest.partAfterHost;

            this.dest.domain = urlUtils.getDomain(this.dest);

            if (parsedReferer) {
                this.dest.referer = parsedReferer.dest.url;
                this.dest.reqOrigin = urlUtils.getDomain(parsedReferer.dest);
            } else if (this.req.headers[_headers2.default.origin]) this.dest.reqOrigin = this.req.headers[_headers2.default.origin];

            this._initRequestNatureInfo();

            return true;
        }

        return false;
    };

    RequestPipelineContext.prototype.buildContentInfo = function buildContentInfo() {
        var contentType = this.destRes.headers['content-type'] || '';
        var accept = this.req.headers['accept'] || '';
        var encoding = this.destRes.headers['content-encoding'];

        var isCSS = contentTypeUtils.isCSSResource(contentType, accept);
        var isManifest = contentTypeUtils.isManifest(contentType);
        var isScript = this.dest.isScript || contentTypeUtils.isScriptResource(contentType, accept);
        var isForm = this.dest.isForm;
        var isFormWithEmptyResponse = isForm && this.destRes.statusCode === 204;

        var isRedirect = this.destRes.headers['location'] && REDIRECT_STATUS_CODES.indexOf(this.destRes.statusCode) > -1;
        var requireAssetsProcessing = (isCSS || isScript || isManifest) && this.destRes.statusCode !== 204;
        var isNotModified = this.req.method === 'GET' && this.destRes.statusCode === 304 && (this.req.headers['if-modified-since'] || this.req.headers['if-none-match']);
        var requireProcessing = !this.isXhr && !this.isFetch && !isFormWithEmptyResponse && !isRedirect && !isNotModified && (this.isPage || this.isIframe || requireAssetsProcessing);

        var isFileDownload = this._isFileDownload();

        var isIframeWithImageSrc = this.isIframe && !this.isPage && /^\s*image\//.test(contentType);

        var charset = null;
        var contentTypeUrlToken = urlUtils.getResourceTypeString({
            isIframe: this.isIframe,
            isForm: isForm,
            isScript: isScript
        });

        // NOTE: We need charset information if we are going to process the resource.
        if (requireProcessing) {
            charset = new _charset2.default();

            if (!charset.fromContentType(contentType)) charset.fromUrl(this.dest.charset);
        }

        if (isFileDownload) this.session.handleFileDownload();

        this.contentInfo = {
            charset: charset,
            requireProcessing: requireProcessing,
            isIframeWithImageSrc: isIframeWithImageSrc,
            isCSS: isCSS,
            isScript: isScript,
            isManifest: isManifest,
            encoding: encoding,
            contentTypeUrlToken: contentTypeUrlToken,
            isFileDownload: isFileDownload,
            isNotModified: isNotModified
        };
    };

    RequestPipelineContext.prototype.getInjectableScripts = function getInjectableScripts() {
        var taskScript = this.isIframe ? '/iframe-task.js' : '/task.js';
        var scripts = this.session.injectable.scripts.concat(taskScript);

        return this._getInjectable(scripts);
    };

    RequestPipelineContext.prototype.getInjectableStyles = function getInjectableStyles() {
        return this._getInjectable(this.session.injectable.styles);
    };

    RequestPipelineContext.prototype.redirect = function redirect(url) {
        this.res.statusCode = 302;
        this.res.setHeader('location', url);
        this.res.end();
    };

    RequestPipelineContext.prototype.closeWithError = function closeWithError(statusCode, resBody) {
        this.res.statusCode = statusCode;

        if (resBody) {
            this.res.setHeader('content-type', 'text/html');
            this.res.end(resBody);
        } else this.res.end();
    };

    RequestPipelineContext.prototype.toProxyUrl = function toProxyUrl(url, isCrossDomain, resourceType, charset) {
        var proxyHostname = this.serverInfo.hostname;
        var proxyPort = isCrossDomain ? this.serverInfo.crossDomainPort : this.serverInfo.port;
        var sessionId = this.session.id;

        return urlUtils.getProxyUrl(url, {
            proxyHostname: proxyHostname,
            proxyPort: proxyPort,
            sessionId: sessionId,
            resourceType: resourceType,
            charset: charset
        });
    };

    return RequestPipelineContext;
}();

exports.default = RequestPipelineContext;
module.exports = exports['default'];