'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _regexpEscape = require('../utils/regexp-escape');

var _regexpEscape2 = _interopRequireDefault(_regexpEscape);

var _internalAttributes = require('../processing/dom/internal-attributes');

var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

var _url = require('../utils/url');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SOURCE_MAP_RE = /#\s*sourceMappingURL\s*=\s*[^\s]+(\s|\*\/)/i; // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
/* eslint hammerhead/proto-methods: 2 */

var CSS_URL_PROPERTY_VALUE_PATTERN = /(url\s*\(\s*)(?:(')([^\s']*)(')|(")([^\s"]*)(")|([^\s\)]*))(\s*\))|(@import\s+)(?:(')([^\s']*)(')|(")([^\s"]*)("))/g;
var STYLESHEET_PROCESSING_START_COMMENT = '/*hammerhead|stylesheet|start*/';
var STYLESHEET_PROCESSING_END_COMMENT = '/*hammerhead|stylesheet|end*/';
var HOVER_PSEUDO_CLASS_RE = /\s*:\s*hover(\W)/gi;
var PSEUDO_CLASS_RE = new RegExp('\\[' + _internalAttributes2.default.hoverPseudoClass + '\\](\\W)', 'ig');
var IS_STYLE_SHEET_PROCESSED_RE = new RegExp('^\\s*' + (0, _regexpEscape2.default)(STYLESHEET_PROCESSING_START_COMMENT), 'gi');
var STYLESHEET_PROCESSING_COMMENTS_RE = new RegExp('^\\s*' + (0, _regexpEscape2.default)(STYLESHEET_PROCESSING_START_COMMENT) + '\n?|' + ('\n?' + (0, _regexpEscape2.default)(STYLESHEET_PROCESSING_END_COMMENT) + '\\s*$'), 'gi');

var StyleProcessor = function () {
    function StyleProcessor() {
        (0, _classCallCheck3.default)(this, StyleProcessor);

        this.STYLESHEET_PROCESSING_START_COMMENT = STYLESHEET_PROCESSING_START_COMMENT;
        this.STYLESHEET_PROCESSING_END_COMMENT = STYLESHEET_PROCESSING_END_COMMENT;
    }

    StyleProcessor.prototype.process = function process(css, urlReplacer, isStylesheetTable) {
        if (!css || typeof css !== 'string' || IS_STYLE_SHEET_PROCESSED_RE.test(css)) return css;

        var prefix = isStylesheetTable ? STYLESHEET_PROCESSING_START_COMMENT + '\n' : '';
        var postfix = isStylesheetTable ? '\n' + STYLESHEET_PROCESSING_END_COMMENT : '';

        // NOTE: Replace the :hover pseudo-class.
        css = css.replace(HOVER_PSEUDO_CLASS_RE, '[' + _internalAttributes2.default.hoverPseudoClass + ']$1');

        // NOTE: Remove the ‘source map’ directive.
        css = css.replace(SOURCE_MAP_RE, '$1');

        // NOTE: Replace URLs in CSS rules with proxy URLs.
        return prefix + this._replaceStylsheetUrls(css, urlReplacer) + postfix;
    };

    StyleProcessor.prototype.cleanUp = function cleanUp(css, parseProxyUrl) {
        if (typeof css !== 'string') return css;

        css = css.replace(PSEUDO_CLASS_RE, ':hover$1').replace(STYLESHEET_PROCESSING_COMMENTS_RE, '');

        return this._replaceStylsheetUrls(css, function (url) {
            var parsedProxyUrl = parseProxyUrl(url);

            return parsedProxyUrl ? parsedProxyUrl.destUrl : url;
        });
    };

    StyleProcessor.prototype._replaceStylsheetUrls = function _replaceStylsheetUrls(css, processor) {
        return css.replace(CSS_URL_PROPERTY_VALUE_PATTERN, function (match, prefix1, openQuote1, url1, closeQuote1, openQuote2, url2, closeQuote2, url3, postfix, prefix2, openQuote3, url4, closeQuote3, openQuote4, url5, closeQuote4) {
            var prefix = prefix1 || prefix2;
            var openQuote = openQuote1 || openQuote2 || openQuote3 || openQuote4 || '';
            var url = url1 || url2 || url3 || url4 || url5;
            var closeQuote = closeQuote1 || closeQuote2 || closeQuote3 || closeQuote4 || '';

            postfix = postfix || '';

            var processedUrl = (0, _url.isSpecialPage)(url) ? url : processor(url);

            return url ? prefix + openQuote + processedUrl + closeQuote + postfix : match;
        });
    };

    return StyleProcessor;
}();

exports.default = new StyleProcessor();
module.exports = exports['default'];