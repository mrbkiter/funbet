'use strict';

exports.__esModule = true;
exports.assign = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var queryOSForCredential = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(cmd) {
        var credential;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return exec(cmd);

                    case 3:
                        credential = _context.sent;
                        return _context.abrupt('return', credential.replace(/\s/g, ''));

                    case 7:
                        _context.prev = 7;
                        _context.t0 = _context['catch'](0);
                        return _context.abrupt('return', '');

                    case 10:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this, [[0, 7]]);
    }));

    return function queryOSForCredential(_x) {
        return _ref.apply(this, arguments);
    };
}();

var assign = exports.assign = function () {
    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(credentials) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        if (cached) {
                            _context2.next = 8;
                            break;
                        }

                        _context2.next = 3;
                        return queryOSForCredential('echo %userdomain%');

                    case 3:
                        _context2.t0 = _context2.sent;
                        _context2.next = 6;
                        return queryOSForCredential('hostname');

                    case 6:
                        _context2.t1 = _context2.sent;
                        cached = {
                            domain: _context2.t0,
                            workstation: _context2.t1
                        };

                    case 8:

                        credentials.domain = credentials.domain || cached.domain;
                        credentials.workstation = credentials.workstation || cached.workstation;

                    case 10:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, this);
    }));

    return function assign(_x2) {
        return _ref2.apply(this, arguments);
    };
}();

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _promisify = require('../../utils/promisify');

var _promisify2 = _interopRequireDefault(_promisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var exec = (0, _promisify2.default)(_child_process2.default.exec);
var cached = null;