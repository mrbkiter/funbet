'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _internalAttributes = require('../processing/dom/internal-attributes');

var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

var _formDataEntry = require('./form-data-entry');

var _formDataEntry2 = _interopRequireDefault(_formDataEntry);

var _buffer = require('../utils/buffer');

var bufferUtils = _interopRequireWildcard(_buffer);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Const
var BOUNDARY_RE = /;\s*boundary=([^;]*)/i;

var PARSER_STATE = {
    inPreamble: 'IN_PREAMBLE',
    inHeaders: 'IN_HEADERS',
    inBody: 'IN_BODY',
    inEpilogue: 'IN_EPILOGUE'
};

// Form data

var FormData = function () {
    function FormData() {
        (0, _classCallCheck3.default)(this, FormData);

        this.boundary = null;
        this.boundaryEnd = null;
        this.epilogue = [];
        this.entries = [];
        this.preamble = [];
    }

    FormData.prototype._removeEntry = function _removeEntry(name) {
        this.entries = this.entries.filter(function (entry) {
            return entry.name !== name;
        });
    };

    FormData.prototype._injectFileInfo = function _injectFileInfo(fileInfo) {
        var entries = this.getEntriesByName(fileInfo.name);

        if (!fileInfo.files.length) return;

        while (entries.length < fileInfo.files.length) {
            var newEntry = new _formDataEntry2.default();

            this.entries.push(newEntry);
            entries.push(newEntry);
        }

        entries.forEach(function (entry, idx) {
            return entry.addFileInfo(fileInfo, idx);
        });
    };

    FormData.prototype._isBoundary = function _isBoundary(line) {
        return bufferUtils.equals(this.boundary, line);
    };

    FormData.prototype._isBoundaryEnd = function _isBoundaryEnd(line) {
        return bufferUtils.equals(this.boundaryEnd, line);
    };

    FormData.prototype.getEntriesByName = function getEntriesByName(name) {
        return this.entries.reduce(function (found, entry) {
            if (entry.name === name) found.push(entry);

            return found;
        }, []);
    };

    FormData.prototype.expandUploads = function expandUploads() {
        var _this = this;

        var uploadsEntry = this.getEntriesByName(_internalAttributes2.default.uploadInfoHiddenInputName)[0];

        if (uploadsEntry) {
            var body = Buffer.concat(uploadsEntry.body).toString();
            var files = JSON.parse(body);

            this._removeEntry(_internalAttributes2.default.uploadInfoHiddenInputName);
            files.forEach(function (fileInfo) {
                return _this._injectFileInfo(fileInfo);
            });
        }
    };

    FormData.prototype.parseContentTypeHeader = function parseContentTypeHeader(header) {
        header = String(header);

        if (header.indexOf('multipart/form-data') > -1) {
            var boundaryMatch = header.match(BOUNDARY_RE);
            var token = boundaryMatch && boundaryMatch[1];

            if (token) {
                this.boundary = new Buffer('--' + token);
                this.boundaryEnd = new Buffer('--' + token + '--');
            }
        }
    };

    FormData.prototype.parseBody = function parseBody(body) {
        var state = PARSER_STATE.inPreamble;
        var lines = bufferUtils.createLineIterator(body);
        var currentEntry = null;

        for (var _iterator = lines, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var line = _ref;

            if (this._isBoundary(line)) {
                if (currentEntry) this.entries.push(currentEntry);

                state = PARSER_STATE.inHeaders;
                currentEntry = new _formDataEntry2.default();
            } else if (this._isBoundaryEnd(line)) {
                if (currentEntry) this.entries.push(currentEntry);

                state = PARSER_STATE.inEpilogue;
            } else if (state === PARSER_STATE.inPreamble) bufferUtils.appendLine(this.preamble, line);else if (state === PARSER_STATE.inHeaders) {
                if (line.length) currentEntry.setHeader(line.toString());else state = PARSER_STATE.inBody;
            } else if (state === PARSER_STATE.inEpilogue) bufferUtils.appendLine(this.epilogue, line);else if (state === PARSER_STATE.inBody) bufferUtils.appendLine(currentEntry.body, line);
        }
    };

    FormData.prototype.toBuffer = function toBuffer() {
        var _this2 = this;

        var chunks = this.preamble;

        if (chunks.length) chunks.push(bufferUtils.CRLF);

        this.entries.forEach(function (entry) {
            chunks.push(_this2.boundary, bufferUtils.CRLF, entry.toBuffer(), bufferUtils.CRLF);
        });

        chunks.push(this.boundaryEnd, bufferUtils.CRLF);

        chunks = chunks.concat(this.epilogue);

        return Buffer.concat(chunks);
    };

    return FormData;
}();

exports.default = FormData;
module.exports = exports['default'];