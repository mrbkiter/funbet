'use strict';

exports.__esModule = true;

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _parse = require('parse5');

var _parse2 = _interopRequireDefault(_parse);

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

var _className = require('../../shadow-ui/class-name');

var _className2 = _interopRequireDefault(_className);

var _dom = require('../dom');

var _dom2 = _interopRequireDefault(_dom);

var _parse5DomAdapter = require('../dom/parse5-dom-adapter');

var _parse5DomAdapter2 = _interopRequireDefault(_parse5DomAdapter);

var _resourceProcessorBase = require('./resource-processor-base');

var _resourceProcessorBase2 = _interopRequireDefault(_resourceProcessorBase);

var _parse3 = require('../../utils/parse5');

var parse5Utils = _interopRequireWildcard(_parse3);

var _getBom = require('../../utils/get-bom');

var _getBom2 = _interopRequireDefault(_getBom);

var _internalProperties = require('../../processing/dom/internal-properties');

var _internalProperties2 = _interopRequireDefault(_internalProperties);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BODY_CREATED_EVENT_SCRIPT = (0, _dedent2.default)('\n    <script type="text/javascript" class="' + _className2.default.selfRemovingScript + '">\n        (function () {\n            if (window["' + _internalProperties2.default.hammerheadPropertyName + '"])\n                window["' + _internalProperties2.default.hammerheadPropertyName + '"].sandbox.node.raiseBodyCreatedEvent();\n\n            var script = document.currentScript || document.scripts[document.scripts.length - 1];\n            script.parentNode.removeChild(script);\n        })();\n    </script>\n');

var PageProcessor = function (_ResourceProcessorBas) {
    (0, _inherits3.default)(PageProcessor, _ResourceProcessorBas);

    function PageProcessor() {
        (0, _classCallCheck3.default)(this, PageProcessor);

        var _this = (0, _possibleConstructorReturn3.default)(this, _ResourceProcessorBas.call(this));

        _this.parser = new _parse2.default.Parser();

        _this.RESTART_PROCESSING = (0, _symbol2.default)();
        _this.PARSED_BODY_CREATED_EVENT_SCRIPT = _this.parser.parseFragment(BODY_CREATED_EVENT_SCRIPT).childNodes[0];

        _this.serializer = new _parse2.default.Serializer();
        return _this;
    }

    PageProcessor._getPageProcessingOptions = function _getPageProcessingOptions(ctx, urlReplacer) {
        return {
            crossDomainProxyPort: ctx.serverInfo.crossDomainPort,
            isIframe: ctx.isIframe,
            stylesheets: ctx.getInjectableStyles(),
            scripts: ctx.getInjectableScripts(),
            urlReplacer: urlReplacer,
            isIframeWithImageSrc: ctx.contentInfo && ctx.contentInfo.isIframeWithImageSrc
        };
    };

    PageProcessor._getPageMetas = function _getPageMetas(metaEls, domAdapter) {
        var metas = [];

        for (var i = 0; i < metaEls.length; i++) {
            metas.push({
                httpEquiv: domAdapter.getAttr(metaEls[i], 'http-equiv'),
                content: domAdapter.getAttr(metaEls[i], 'content'),
                charset: domAdapter.getAttr(metaEls[i], 'charset')
            });
        }

        return metas;
    };

    PageProcessor._addPageResources = function _addPageResources(head, processingOptions) {
        var result = [];

        if (processingOptions.stylesheets) {
            processingOptions.stylesheets.forEach(function (stylesheetUrl) {
                result.push(parse5Utils.createElement('link', [{ name: 'rel', value: 'stylesheet' }, { name: 'type', value: 'text/css' }, { name: 'class', value: _className2.default.uiStylesheet }, { name: 'href', value: stylesheetUrl }]));
            });
        }

        if (processingOptions.scripts) {
            processingOptions.scripts.forEach(function (scriptUrl) {
                result.push(parse5Utils.createElement('script', [{ name: 'type', value: 'text/javascript' }, { name: 'class', value: _className2.default.script }, { name: 'charset', value: 'UTF-8' }, { name: 'src', value: scriptUrl }]));
            });
        }

        for (var i = result.length; i--; i > -1) {
            parse5Utils.insertElement(result[i], head);
        }
    };

    PageProcessor._addCharsetInfo = function _addCharsetInfo(head, charset) {
        parse5Utils.insertElement(parse5Utils.createElement('meta', [{ name: 'class', value: _className2.default.charset }, { name: 'charset', value: charset }]), head);
    };

    PageProcessor._changeMetas = function _changeMetas(metas, domAdapter) {
        if (metas) {
            metas.forEach(function (meta) {
                // TODO: Figure out how to emulate the tag behavior.
                if (domAdapter.getAttr(meta, 'name') === 'referrer' && domAdapter.getAttr(meta, 'content') === 'origin') parse5Utils.removeNode(meta);
                // NOTE: Remove the existing ‘compatible’ meta tag and add a new one at the beginning of the head.
                if (domAdapter.getAttr(meta, 'http-equiv') === 'X-UA-Compatible') parse5Utils.removeNode(meta);
            });
        }
    };

    PageProcessor._addCompatibilityMeta = function _addCompatibilityMeta(head) {
        parse5Utils.insertElement(parse5Utils.createElement('meta', [{ name: 'http-equiv', value: 'X-UA-Compatible' }, { name: 'content', value: 'IE=edge' }]), head);
    };

    PageProcessor._prepareHtml = function _prepareHtml(html, processingOpts) {
        if (processingOpts && processingOpts.iframeImageSrc) return '<html><body><img src="' + processingOpts.iframeImageSrc + '" /></body></html>';

        return html;
    };

    PageProcessor.prototype._addBodyCreatedEventScript = function _addBodyCreatedEventScript(body) {
        parse5Utils.insertElement(this.PARSED_BODY_CREATED_EVENT_SCRIPT, body);
    };

    PageProcessor.prototype.shouldProcessResource = function shouldProcessResource(ctx) {
        // NOTE: In some cases, Firefox sends the default accept header for the script.
        // We should not try to process it as a page in this case.
        return (ctx.isPage || ctx.contentInfo.isIframeWithImageSrc) && !ctx.contentInfo.isScript && !ctx.contentInfo.isFileDownload;
    };

    PageProcessor.prototype.processResource = function processResource(html, ctx, charset, urlReplacer, processingOpts) {
        var pageProcessor = this;

        processingOpts = processingOpts || PageProcessor._getPageProcessingOptions(ctx, urlReplacer);

        var bom = (0, _getBom2.default)(html);

        html = bom ? html.replace(bom, '') : html;

        PageProcessor._prepareHtml(html, processingOpts);

        var root = this.parser.parse(html);
        var domAdapter = new _parse5DomAdapter2.default(processingOpts.isIframe, processingOpts.crossDomainProxyPort);
        var elements = parse5Utils.findElementsByTagNames(root, ['base', 'meta', 'head', 'body', 'frameset']);
        var base = elements.base ? elements.base[0] : null;
        var baseUrl = base ? domAdapter.getAttr(base, 'href') : '';
        var metas = elements.meta;
        var head = elements.head[0];
        var body = elements.body ? elements.body[0] : elements.frameset[0];

        if (metas && charset.fromMeta(PageProcessor._getPageMetas(metas, domAdapter))) return this.RESTART_PROCESSING;

        var iframeHtmlProcessor = function iframeHtmlProcessor(iframeHtml, callback) {
            var storedIsIframe = processingOpts.isIframe;

            processingOpts.isIframe = true;

            var result = pageProcessor.processResource(iframeHtml, ctx, charset, urlReplacer, processingOpts);

            processingOpts.isIframe = storedIsIframe;

            callback(result);
        };

        var domProcessor = new _dom2.default(domAdapter);
        var replacer = function replacer(resourceUrl, resourceType, charsetAttrValue) {
            return urlReplacer(resourceUrl, resourceType, charsetAttrValue, baseUrl);
        };

        domProcessor.on(domProcessor.HTML_PROCESSING_REQUIRED_EVENT, iframeHtmlProcessor);
        parse5Utils.walkElements(root, function (el) {
            return domProcessor.processElement(el, replacer);
        });
        domProcessor.off(domProcessor.HTML_PROCESSING_REQUIRED_EVENT, iframeHtmlProcessor);

        PageProcessor._addPageResources(head, processingOpts, domAdapter);
        this._addBodyCreatedEventScript(body, domAdapter);
        PageProcessor._changeMetas(metas, domAdapter);
        PageProcessor._addCharsetInfo(head, charset.get(), domAdapter);
        PageProcessor._addCompatibilityMeta(head, domAdapter);

        return (bom || '') + this.serializer.serialize(root);
    };

    return PageProcessor;
}(_resourceProcessorBase2.default);

exports.default = new PageProcessor();
module.exports = exports['default'];