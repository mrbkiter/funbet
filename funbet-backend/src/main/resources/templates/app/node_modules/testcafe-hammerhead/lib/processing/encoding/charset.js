'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _labels = require('./labels');

var _labels2 = _interopRequireDefault(_labels);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CHARSET_RE = /(?:^|;)\s*charset=(.+)(?:;|$)/i;
var META_CHARSET_RE = /charset ?= ?['"]?([^ ;"']*)['"]?/i;

// NOTE: HTTP 1.1 specifies ISO-8859-1 as the default charset
// (see: http://www.w3.org/International/O-HTTP-charset.en.php).
var DEFAULT_CHARSET = 'iso-8859-1';

var CHARSET_BOM_LIST = [{
    charset: 'utf-8',
    bom: [0xEF, 0xBB, 0xBF]
}, {
    charset: 'utf-16le',
    bom: [0xFF, 0xFE]
}, {
    charset: 'utf-16be',
    bom: [0xFE, 0xFF]
}];

var PRIORITY_LIST = {
    BOM: 3,
    CONTENT_TYPE: 2,
    URL: 1,
    META: 1,
    DEFAULT: 0
};

// Charset

var Charset = function () {
    function Charset() {
        (0, _classCallCheck3.default)(this, Charset);

        this.charset = DEFAULT_CHARSET;
        this.priority = PRIORITY_LIST.DEFAULT;
    }

    Charset._bufferStartsWithBOM = function _bufferStartsWithBOM(resBuf, bom) {
        if (resBuf.length < bom.length) return false;

        for (var i = 0; i < bom.length; i++) {
            if (resBuf[i] !== bom[i]) return false;
        }

        return true;
    };

    Charset.prototype.set = function set(charset, priority) {
        if (charset && this.charset !== charset && this.priority <= priority) {
            this.charset = charset;
            this.priority = priority;

            return true;
        }

        return false;
    };

    Charset.prototype.get = function get() {
        return this.charset;
    };

    Charset.prototype.isFromBOM = function isFromBOM() {
        return this.priority === PRIORITY_LIST.BOM;
    };

    Charset.prototype.fromBOM = function fromBOM(resBuf) {
        for (var i = 0; i < CHARSET_BOM_LIST.length; i++) {
            if (Charset._bufferStartsWithBOM(resBuf, CHARSET_BOM_LIST[i].bom)) return this.set(CHARSET_BOM_LIST[i].charset, PRIORITY_LIST.BOM);
        }

        return false;
    };

    Charset.prototype.fromContentType = function fromContentType(contentTypeHeader) {
        if (this.priority <= PRIORITY_LIST.CONTENT_TYPE) {
            var charsetMatch = contentTypeHeader && contentTypeHeader.match(CHARSET_RE);
            var charset = charsetMatch && charsetMatch[1];

            return this.set((0, _labels2.default)(charset), PRIORITY_LIST.CONTENT_TYPE);
        }

        return false;
    };

    Charset.prototype.fromUrl = function fromUrl(charsetFromUrl) {
        if (charsetFromUrl && this.priority <= PRIORITY_LIST.URL) return this.set((0, _labels2.default)(charsetFromUrl), PRIORITY_LIST.URL);

        return false;
    };

    // NOTE: Parsing charset from meta tags
    // www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#determining-the-character-encoding
    // Each <meta> descriptor should contain values of the "http-equiv", "content" and "charset" attributes.


    Charset.prototype.fromMeta = function fromMeta(metas) {
        if (this.priority < PRIORITY_LIST.META && metas.length) {
            var needPragma = null;
            var charsetStr = null;

            metas.forEach(function (attrs) {
                var shouldParseFromContentAttr = needPragma !== false && attrs.content && attrs.httpEquiv && attrs.httpEquiv.toLowerCase() === 'content-type';

                if (shouldParseFromContentAttr) {
                    var charsetMatch = attrs.content.match(META_CHARSET_RE);

                    if (charsetMatch) {
                        needPragma = true;
                        charsetStr = charsetMatch[1];
                    }
                }

                if (attrs.charset) {
                    needPragma = false;
                    charsetStr = attrs.charset;
                }
            });

            return this.set((0, _labels2.default)(charsetStr), PRIORITY_LIST.META);
        }

        return false;
    };

    return Charset;
}();

exports.default = Charset;
module.exports = exports['default'];