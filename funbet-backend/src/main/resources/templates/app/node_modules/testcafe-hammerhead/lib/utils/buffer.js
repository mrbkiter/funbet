"use strict";

exports.__esModule = true;
exports.CRLF = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _iterator = require("babel-runtime/core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

exports.createLineIterator = createLineIterator;
exports.appendLine = appendLine;
exports.equals = equals;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Const
var LF = 0x0A;
var CR = 0x0D;
var CRLF_LENGTH = 2;

var CRLF = exports.CRLF = new Buffer([CR, LF]);

// API
function createLineIterator(buffer) {
    var _ref;

    return _ref = {}, _ref[_iterator2.default] = _regenerator2.default.mark(function _callee() {
        var lastIdx, start, i;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        lastIdx = buffer.length - 1;
                        start = 0;
                        i = 0;

                    case 3:
                        if (!(i < buffer.length)) {
                            _context.next = 16;
                            break;
                        }

                        if (!(i === lastIdx)) {
                            _context.next = 9;
                            break;
                        }

                        _context.next = 7;
                        return buffer.slice(start);

                    case 7:
                        _context.next = 13;
                        break;

                    case 9:
                        if (!(buffer[i] === CR && buffer[i + 1] === LF)) {
                            _context.next = 13;
                            break;
                        }

                        _context.next = 12;
                        return buffer.slice(start, i);

                    case 12:
                        start = i + CRLF_LENGTH;

                    case 13:
                        i++;
                        _context.next = 3;
                        break;

                    case 16:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, this);
    }), _ref;
}

function appendLine(lines, line) {
    if (lines.length) lines.push(CRLF);

    lines.push(line);
}

function equals(buffer1, buffer2) {
    if (buffer1.length !== buffer2.length) return false;

    for (var i = 0; i < buffer1.length; i++) {
        if (buffer1[i] !== buffer2[i]) return false;
    }

    return true;
}