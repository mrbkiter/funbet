'use strict';

exports.__esModule = true;

var _nodeBuilder = require('../node-builder');

var _instruction = require('../instruction');

var _instruction2 = _interopRequireDefault(_instruction);

var _esotope = require('../tools/esotope');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Transform:
// sessionStorage, localStorage -->
// __get$Storage(sessionStorage), __get$Storage(localStorage)

exports.default = {
    nodeReplacementRequireTransform: false,

    nodeTypes: [_esotope.Syntax.Identifier],

    condition: function condition(node, parent) {
        if (node.name !== 'sessionStorage' && node.name !== 'localStorage') return false;

        // Skip: function localStorage() {}
        if (parent.type === _esotope.Syntax.FunctionDeclaration && parent.id === node) return false;

        // Skip: window.localStorage
        if (parent.type === _esotope.Syntax.MemberExpression && parent.property === node) return false;

        // Skip: var localStorage = value;
        if (parent.type === _esotope.Syntax.VariableDeclarator && parent.id === node) return false;

        // Skip: localStorage = value
        if (parent.type === _esotope.Syntax.AssignmentExpression && parent.left === node) return false;

        // Skip: { localStorage: value }
        if (parent.type === _esotope.Syntax.Property && parent.key === node) return false;

        // Skip: localStorage++ || localStorage-- || ++localStorage || --localStorage
        if (parent.type === _esotope.Syntax.UpdateExpression && parent.operator === '++' || parent.operator === '--') return false;

        // Skip: function (localStorage) { ... } || function func(localStorage) { ... }
        if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration) && parent.params.indexOf(node) !== -1) return false;

        // Skip already transformed: __get$Storage(localStorage)
        if (parent.type === _esotope.Syntax.CallExpression && parent.callee.name === _instruction2.default.getStorage) return false;

        return true;
    },

    run: function run(node) {
        return (0, _nodeBuilder.createGetStorageMethCall)(node.name);
    }
}; // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

module.exports = exports['default'];