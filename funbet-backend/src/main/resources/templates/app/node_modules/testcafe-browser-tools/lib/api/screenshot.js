'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _findWindow = require('./find-window');

var _findWindow2 = _interopRequireDefault(_findWindow);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _utilsExec = require('../utils/exec');

var _utilsEnsureDirectory = require('../utils/ensure-directory');

var _utilsEnsureDirectory2 = _interopRequireDefault(_utilsEnsureDirectory);

var _binaries = require('../binaries');

var _binaries2 = _interopRequireDefault(_binaries);

/**
 * Takes a screenshot of the browser window where the specified web page is opened.
 * @function
 * @async
 * @name screenshot
 * @param {string} pageTitle - Specifies the title of the web page opened in the browser.
 * @param {string} screenshotPath - Specifies the full path to the screenshot file. For example, D:\Temp\chrome-screenshot.jpg.
 */

exports.default = function callee$0$0(pageTitle, screenshotPath) {
    var windowDescription, windowParams;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (_utilsEnsureDirectory2.default(screenshotPath)) {
                    context$1$0.next = 2;
                    break;
                }

                return context$1$0.abrupt('return');

            case 2:
                windowDescription = void 0;

                if (!(_osFamily2.default.win || _osFamily2.default.linux)) {
                    context$1$0.next = 12;
                    break;
                }

                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(_findWindow2.default(pageTitle));

            case 6:
                windowParams = context$1$0.sent;

                if (windowParams) {
                    context$1$0.next = 9;
                    break;
                }

                return context$1$0.abrupt('return');

            case 9:

                if (_osFamily2.default.win) windowDescription = [windowParams.hwnd, windowParams.browser];else windowDescription = [windowParams.windowId];
                context$1$0.next = 17;
                break;

            case 12:
                if (!_osFamily2.default.mac) {
                    context$1$0.next = 16;
                    break;
                }

                windowDescription = [pageTitle];
                context$1$0.next = 17;
                break;

            case 16:
                return context$1$0.abrupt('return');

            case 17:
                context$1$0.next = 19;
                return _regeneratorRuntime.awrap(_utilsExec.execFile(_binaries2.default.screenshot, windowDescription.concat(screenshotPath)));

            case 19:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

module.exports = exports.default;